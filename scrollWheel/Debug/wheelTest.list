
wheelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b88  08009b88  0000b17c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b88  08009b88  0000ab88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b90  08009b90  0000b17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b90  08009b90  0000ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b94  08009b94  0000ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08009b98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  2000017c  08009d14  0000b17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  08009d14  0000bd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b46  00000000  00000000  0000b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003166  00000000  00000000  0001ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b67  00000000  00000000  00020d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018966  00000000  00000000  000218cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e77  00000000  00000000  0003a235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9ac  00000000  00000000  0004e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  000d8a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dcb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000017c 	.word	0x2000017c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009b24 	.word	0x08009b24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000180 	.word	0x20000180
 80001d4:	08009b24 	.word	0x08009b24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AS5600_New>:

#include "as5600.h"
/**********************    GLOBAL VARIABLES    ***********************/

/*******************    FUNCTION IMPLEMENTATIONS    ********************/
AS5600_TypeDef *AS5600_New(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
    AS5600_TypeDef *a = (AS5600_TypeDef *)calloc(1, sizeof(AS5600_TypeDef));
 80004ce:	2118      	movs	r1, #24
 80004d0:	2001      	movs	r0, #1
 80004d2:	f009 fa19 	bl	8009908 <calloc>
 80004d6:	4603      	mov	r3, r0
 80004d8:	607b      	str	r3, [r7, #4]
    return a;
 80004da:	687b      	ldr	r3, [r7, #4]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <AS5600_Init>:


HAL_StatusTypeDef AS5600_Init(AS5600_TypeDef *a) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73bb      	strb	r3, [r7, #14]
    uint8_t pwm = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_status = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	737b      	strb	r3, [r7, #13]
    /* Set configuration defaults for uninitialized values. */
    if (!(a->PositiveRotationDirection)) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7b9b      	ldrb	r3, [r3, #14]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <AS5600_Init+0x22>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2201      	movs	r2, #1
 8000504:	739a      	strb	r2, [r3, #14]
    }
    if (!(a->LowPowerMode)) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	7bdb      	ldrb	r3, [r3, #15]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d102      	bne.n	8000514 <AS5600_Init+0x30>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	73da      	strb	r2, [r3, #15]
    }
    if (!(a->Hysteresis)) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7c1b      	ldrb	r3, [r3, #16]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <AS5600_Init+0x3e>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2201      	movs	r2, #1
 8000520:	741a      	strb	r2, [r3, #16]
    }
    if (!(a->OutputMode)) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7c5b      	ldrb	r3, [r3, #17]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <AS5600_Init+0x4c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2201      	movs	r2, #1
 800052e:	745a      	strb	r2, [r3, #17]
    }
    if (!(a->PWMFrequency)) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7c9b      	ldrb	r3, [r3, #18]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <AS5600_Init+0x5a>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2201      	movs	r2, #1
 800053c:	749a      	strb	r2, [r3, #18]
    }
    if (!(a->SlowFilter)) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7cdb      	ldrb	r3, [r3, #19]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d102      	bne.n	800054c <AS5600_Init+0x68>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2201      	movs	r2, #1
 800054a:	74da      	strb	r2, [r3, #19]
    }
    if (!(a->FastFilterThreshold)) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7d1b      	ldrb	r3, [r3, #20]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <AS5600_Init+0x76>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2201      	movs	r2, #1
 8000558:	751a      	strb	r2, [r3, #20]
    }
    if (!(a->WatchdogTimer)) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7d5b      	ldrb	r3, [r3, #21]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d102      	bne.n	8000568 <AS5600_Init+0x84>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2202      	movs	r2, #2
 8000566:	755a      	strb	r2, [r3, #21]
    }
    /* Write configuration settings.
       Do this in single write instead of using functions below to avoid
       overhead of multiple calls to HAL_I2C_Mem_Write */
    switch (a->LowPowerMode) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7bdb      	ldrb	r3, [r3, #15]
 800056c:	3b01      	subs	r3, #1
 800056e:	2b03      	cmp	r3, #3
 8000570:	d838      	bhi.n	80005e4 <AS5600_Init+0x100>
 8000572:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <AS5600_Init+0x94>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000589 	.word	0x08000589
 800057c:	08000599 	.word	0x08000599
 8000580:	080005b7 	.word	0x080005b7
 8000584:	080005d5 	.word	0x080005d5
        case AS5600_POWER_MODE_NOM:
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7ddb      	ldrb	r3, [r3, #23]
 800058c:	f023 0303 	bic.w	r3, r3, #3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	75da      	strb	r2, [r3, #23]
            break;
 8000596:	e029      	b.n	80005ec <AS5600_Init+0x108>
        case AS5600_POWER_MODE_LPM1:
            a->confRegister[1] |= (1UL << 0);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7ddb      	ldrb	r3, [r3, #23]
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7ddb      	ldrb	r3, [r3, #23]
 80005aa:	f023 0302 	bic.w	r3, r3, #2
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	75da      	strb	r2, [r3, #23]
            break;
 80005b4:	e01a      	b.n	80005ec <AS5600_Init+0x108>
        case AS5600_POWER_MODE_LPM2:
            a->confRegister[1] |= (1UL << 1);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7ddb      	ldrb	r3, [r3, #23]
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= (1UL << 0);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7ddb      	ldrb	r3, [r3, #23]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	75da      	strb	r2, [r3, #23]
            break;
 80005d2:	e00b      	b.n	80005ec <AS5600_Init+0x108>
        case AS5600_POWER_MODE_LPM3:
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7ddb      	ldrb	r3, [r3, #23]
 80005d8:	f043 0303 	orr.w	r3, r3, #3
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	75da      	strb	r2, [r3, #23]
            break;
 80005e2:	e003      	b.n	80005ec <AS5600_Init+0x108>
        default:
            /* Invalid low power mode specified */
            status = HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73bb      	strb	r3, [r7, #14]
            return status;
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	e1e1      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    switch (a->Hysteresis) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7c1b      	ldrb	r3, [r3, #16]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d838      	bhi.n	8000668 <AS5600_Init+0x184>
 80005f6:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <AS5600_Init+0x118>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	0800061d 	.word	0x0800061d
 8000604:	0800063b 	.word	0x0800063b
 8000608:	08000659 	.word	0x08000659
        case AS5600_HYSTERESIS_OFF:
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7ddb      	ldrb	r3, [r3, #23]
 8000610:	f023 030c 	bic.w	r3, r3, #12
 8000614:	b2da      	uxtb	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	75da      	strb	r2, [r3, #23]
            break;
 800061a:	e029      	b.n	8000670 <AS5600_Init+0x18c>
        case AS5600_HYSTERESIS_1LSB:
            a->confRegister[1] |= (1UL << 2);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7ddb      	ldrb	r3, [r3, #23]
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	b2da      	uxtb	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7ddb      	ldrb	r3, [r3, #23]
 800062e:	f023 0308 	bic.w	r3, r3, #8
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	75da      	strb	r2, [r3, #23]
            break;
 8000638:	e01a      	b.n	8000670 <AS5600_Init+0x18c>
        case AS5600_HYSTERESIS_2LSB:
            a->confRegister[1] &= ~(1UL << 2);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7ddb      	ldrb	r3, [r3, #23]
 800063e:	f023 0304 	bic.w	r3, r3, #4
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 3);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7ddb      	ldrb	r3, [r3, #23]
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	75da      	strb	r2, [r3, #23]
            break;
 8000656:	e00b      	b.n	8000670 <AS5600_Init+0x18c>
        case AS5600_HYSTERESIS_3LSB:
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7ddb      	ldrb	r3, [r3, #23]
 800065c:	f043 030c 	orr.w	r3, r3, #12
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	75da      	strb	r2, [r3, #23]
            break;
 8000666:	e003      	b.n	8000670 <AS5600_Init+0x18c>
        default:
            /* Invalid hysteresis mode specified */
            status = HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
            return status;
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	e19f      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    switch (a->OutputMode) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7c5b      	ldrb	r3, [r3, #17]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d01d      	beq.n	80006b4 <AS5600_Init+0x1d0>
 8000678:	2b03      	cmp	r3, #3
 800067a:	dc2c      	bgt.n	80006d6 <AS5600_Init+0x1f2>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d002      	beq.n	8000686 <AS5600_Init+0x1a2>
 8000680:	2b02      	cmp	r3, #2
 8000682:	d008      	beq.n	8000696 <AS5600_Init+0x1b2>
 8000684:	e027      	b.n	80006d6 <AS5600_Init+0x1f2>
        case AS5600_OUTPUT_STAGE_FULL:
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7ddb      	ldrb	r3, [r3, #23]
 800068a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800068e:	b2da      	uxtb	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	75da      	strb	r2, [r3, #23]
            break;
 8000694:	e023      	b.n	80006de <AS5600_Init+0x1fa>
        case AS5600_OUTPUT_STAGE_REDUCED:
            a->confRegister[1] |= (1UL << 4);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7ddb      	ldrb	r3, [r3, #23]
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 5);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7ddb      	ldrb	r3, [r3, #23]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	75da      	strb	r2, [r3, #23]
            break;
 80006b2:	e014      	b.n	80006de <AS5600_Init+0x1fa>
        case AS5600_OUTPUT_STAGE_PWM:
            a->confRegister[1] &= (1UL << 4);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 5);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7ddb      	ldrb	r3, [r3, #23]
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	75da      	strb	r2, [r3, #23]
            pwm = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
            break;
 80006d4:	e003      	b.n	80006de <AS5600_Init+0x1fa>
        default:
            /* Invalid output mode specified */
            status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]
            return status;
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	e168      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    if (pwm) {
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d041      	beq.n	8000768 <AS5600_Init+0x284>
        switch (a->PWMFrequency) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c9b      	ldrb	r3, [r3, #18]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d838      	bhi.n	8000760 <AS5600_Init+0x27c>
 80006ee:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <AS5600_Init+0x210>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000715 	.word	0x08000715
 80006fc:	08000733 	.word	0x08000733
 8000700:	08000751 	.word	0x08000751
            case AS5600_PWM_FREQUENCY_115HZ:
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7ddb      	ldrb	r3, [r3, #23]
 8000708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	75da      	strb	r2, [r3, #23]
                break;
 8000712:	e029      	b.n	8000768 <AS5600_Init+0x284>
            case AS5600_PWM_FREQUENCY_230HZ:
                a->confRegister[1] |= (1UL << 6);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7ddb      	ldrb	r3, [r3, #23]
 8000718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071c:	b2da      	uxtb	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] &= ~(1UL << 7);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7ddb      	ldrb	r3, [r3, #23]
 8000726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800072a:	b2da      	uxtb	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	75da      	strb	r2, [r3, #23]
                break;
 8000730:	e01a      	b.n	8000768 <AS5600_Init+0x284>
            case AS5600_PWM_FREQUENCY_460HZ:
                a->confRegister[1] &= ~(1UL << 6);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7ddb      	ldrb	r3, [r3, #23]
 8000736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] |= (1UL << 7);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7ddb      	ldrb	r3, [r3, #23]
 8000744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000748:	b2da      	uxtb	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	75da      	strb	r2, [r3, #23]
                break;
 800074e:	e00b      	b.n	8000768 <AS5600_Init+0x284>
            case AS5600_PWM_FREQUENCY_920HZ:
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7ddb      	ldrb	r3, [r3, #23]
 8000754:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	75da      	strb	r2, [r3, #23]
                break;
 800075e:	e003      	b.n	8000768 <AS5600_Init+0x284>
            default:
                /* Invalid PWM frequency specified. */
                status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
                return status;
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	e123      	b.n	80009b0 <AS5600_Init+0x4cc>
        }
    }
    switch (a->SlowFilter) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7cdb      	ldrb	r3, [r3, #19]
 800076c:	3b01      	subs	r3, #1
 800076e:	2b03      	cmp	r3, #3
 8000770:	d838      	bhi.n	80007e4 <AS5600_Init+0x300>
 8000772:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <AS5600_Init+0x294>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	08000799 	.word	0x08000799
 8000780:	080007b7 	.word	0x080007b7
 8000784:	080007d5 	.word	0x080007d5
        case AS5600_SLOW_FILTER_16X:
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7d9b      	ldrb	r3, [r3, #22]
 800078c:	f023 0303 	bic.w	r3, r3, #3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	759a      	strb	r2, [r3, #22]
            break;
 8000796:	e029      	b.n	80007ec <AS5600_Init+0x308>
        case AS5600_SLOW_FILTER_8X:
            a->confRegister[0] |= (1UL << 0);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7d9b      	ldrb	r3, [r3, #22]
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7d9b      	ldrb	r3, [r3, #22]
 80007aa:	f023 0302 	bic.w	r3, r3, #2
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	759a      	strb	r2, [r3, #22]
            break;
 80007b4:	e01a      	b.n	80007ec <AS5600_Init+0x308>
        case AS5600_SLOW_FILTER_4X:
            a->confRegister[0] &= ~(1UL << 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7d9b      	ldrb	r3, [r3, #22]
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7d9b      	ldrb	r3, [r3, #22]
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	759a      	strb	r2, [r3, #22]
            break;
 80007d2:	e00b      	b.n	80007ec <AS5600_Init+0x308>
        case AS5600_SLOW_FILTER_2X:
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7d9b      	ldrb	r3, [r3, #22]
 80007d8:	f043 0303 	orr.w	r3, r3, #3
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	759a      	strb	r2, [r3, #22]
            break;
 80007e2:	e003      	b.n	80007ec <AS5600_Init+0x308>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73bb      	strb	r3, [r7, #14]
            return status;
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	e0e1      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    switch (a->FastFilterThreshold) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d1b      	ldrb	r3, [r3, #20]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	d87c      	bhi.n	80008f0 <AS5600_Init+0x40c>
 80007f6:	a201      	add	r2, pc, #4	@ (adr r2, 80007fc <AS5600_Init+0x318>)
 80007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fc:	0800081d 	.word	0x0800081d
 8000800:	0800082d 	.word	0x0800082d
 8000804:	0800084b 	.word	0x0800084b
 8000808:	08000869 	.word	0x08000869
 800080c:	08000887 	.word	0x08000887
 8000810:	080008a5 	.word	0x080008a5
 8000814:	080008c3 	.word	0x080008c3
 8000818:	080008e1 	.word	0x080008e1
        case AS5600_FAST_FILTER_SLOW_ONLY:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7d9b      	ldrb	r3, [r3, #22]
 8000820:	f023 031c 	bic.w	r3, r3, #28
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	759a      	strb	r2, [r3, #22]
            break;
 800082a:	e065      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_6LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7d9b      	ldrb	r3, [r3, #22]
 8000830:	f023 0318 	bic.w	r3, r3, #24
 8000834:	b2da      	uxtb	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 2);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7d9b      	ldrb	r3, [r3, #22]
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	b2da      	uxtb	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	759a      	strb	r2, [r3, #22]
            break;
 8000848:	e056      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_7LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7d9b      	ldrb	r3, [r3, #22]
 800084e:	f023 0314 	bic.w	r3, r3, #20
 8000852:	b2da      	uxtb	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 3);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7d9b      	ldrb	r3, [r3, #22]
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	b2da      	uxtb	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	759a      	strb	r2, [r3, #22]
            break;
 8000866:	e047      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_9LSB:
            a->confRegister[0] &= ~(1UL << 4);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7d9b      	ldrb	r3, [r3, #22]
 800086c:	f023 0310 	bic.w	r3, r3, #16
 8000870:	b2da      	uxtb	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d9b      	ldrb	r3, [r3, #22]
 800087a:	f043 030c 	orr.w	r3, r3, #12
 800087e:	b2da      	uxtb	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	759a      	strb	r2, [r3, #22]
            break;
 8000884:	e038      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_18LSB:
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7d9b      	ldrb	r3, [r3, #22]
 800088a:	f023 030c 	bic.w	r3, r3, #12
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 4);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7d9b      	ldrb	r3, [r3, #22]
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	b2da      	uxtb	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	759a      	strb	r2, [r3, #22]
            break;
 80008a2:	e029      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_21LSB:
            a->confRegister[0] &= ~(1UL << 3);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7d9b      	ldrb	r3, [r3, #22]
 80008a8:	f023 0308 	bic.w	r3, r3, #8
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7d9b      	ldrb	r3, [r3, #22]
 80008b6:	f043 0314 	orr.w	r3, r3, #20
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	759a      	strb	r2, [r3, #22]
            break;
 80008c0:	e01a      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_24LSB:
            a->confRegister[0] &= ~(1UL << 2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7d9b      	ldrb	r3, [r3, #22]
 80008c6:	f023 0304 	bic.w	r3, r3, #4
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7d9b      	ldrb	r3, [r3, #22]
 80008d4:	f043 0318 	orr.w	r3, r3, #24
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	759a      	strb	r2, [r3, #22]
            break;
 80008de:	e00b      	b.n	80008f8 <AS5600_Init+0x414>
        case AS5600_FAST_FILTER_10LSB:
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d9b      	ldrb	r3, [r3, #22]
 80008e4:	f043 031c 	orr.w	r3, r3, #28
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	759a      	strb	r2, [r3, #22]
            break;
 80008ee:	e003      	b.n	80008f8 <AS5600_Init+0x414>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
            return status;
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	e05b      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    switch (a->WatchdogTimer) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7d5b      	ldrb	r3, [r3, #21]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d002      	beq.n	8000906 <AS5600_Init+0x422>
 8000900:	2b02      	cmp	r3, #2
 8000902:	d008      	beq.n	8000916 <AS5600_Init+0x432>
 8000904:	e00f      	b.n	8000926 <AS5600_Init+0x442>
        case AS5600_WATCHDOG_OFF:
            a->confRegister[0] &= ~(1UL << 6);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7d9b      	ldrb	r3, [r3, #22]
 800090a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800090e:	b2da      	uxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	759a      	strb	r2, [r3, #22]
            break;
 8000914:	e00b      	b.n	800092e <AS5600_Init+0x44a>
        case AS5600_WATCHDOG_ON:
            a->confRegister[0] |= (1UL << 6);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7d9b      	ldrb	r3, [r3, #22]
 800091a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091e:	b2da      	uxtb	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	759a      	strb	r2, [r3, #22]
            break;
 8000924:	e003      	b.n	800092e <AS5600_Init+0x44a>
        default:
            /* Invalid watchdog state specified */
            status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	73bb      	strb	r3, [r7, #14]
            return status;
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	e040      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, a->confRegister, 2, HAL_MAX_DELAY) != HAL_OK)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	4619      	mov	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3316      	adds	r3, #22
 800093c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000940:	9202      	str	r2, [sp, #8]
 8000942:	2202      	movs	r2, #2
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	2207      	movs	r2, #7
 800094c:	f001 f8ac 	bl	8001aa8 <HAL_I2C_Mem_Write>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <AS5600_Init+0x47a>
    {
        status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	73bb      	strb	r3, [r7, #14]
        return status;
 800095a:	7bbb      	ldrb	r3, [r7, #14]
 800095c:	e028      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    /* Check magnet status */
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 800095e:	f107 030d 	add.w	r3, r7, #13
 8000962:	4619      	mov	r1, r3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f855 	bl	8000a14 <AS5600_GetMagnetStatus>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <AS5600_Init+0x494>
        status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]
        return status;
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	e01b      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 8000978:	7b7b      	ldrb	r3, [r7, #13]
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <AS5600_Init+0x4a6>
        /* Magnet not detected */
        status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	73bb      	strb	r3, [r7, #14]
        return status;
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	e012      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	2b00      	cmp	r3, #0
 8000992:	d003      	beq.n	800099c <AS5600_Init+0x4b8>
        /* B-field is too strong */
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73bb      	strb	r3, [r7, #14]
        return status;
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	e009      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 800099c:	7b7b      	ldrb	r3, [r7, #13]
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <AS5600_Init+0x4ca>
        /* B-field is too weak */
        status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	73bb      	strb	r3, [r7, #14]
        return status;
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	e000      	b.n	80009b0 <AS5600_Init+0x4cc>
    }
    /* Write */

    return status;
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <AS5600_GetAngle>:
    *angle = ((data[0] << 8) | data[1]);
    return status;
}

HAL_StatusTypeDef AS5600_GetAngle(AS5600_TypeDef *const a,
                                  uint16_t *const angle) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af04      	add	r7, sp, #16
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0};
 80009c6:	2300      	movs	r3, #0
 80009c8:	81bb      	strh	r3, [r7, #12]
    if (HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr,
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2302      	movs	r3, #2
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2301      	movs	r3, #1
 80009e6:	220e      	movs	r2, #14
 80009e8:	f001 f958 	bl	8001c9c <HAL_I2C_Mem_Read>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <AS5600_GetAngle+0x3e>
                            AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT,
                            data, 2, HAL_MAX_DELAY) != HAL_OK) {
        status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
    }
    *angle = ((data[0] << 8) | data[1]);
 80009f6:	7b3b      	ldrb	r3, [r7, #12]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	801a      	strh	r2, [r3, #0]

    return status;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <AS5600_GetMagnetStatus>:

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a,
                                         uint8_t *const stat) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	220b      	movs	r2, #11
 8000a3e:	f001 f92d 	bl	8001c9c <HAL_I2C_Mem_Read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <AS5600_GetMagnetStatus+0x38>
                            I2C_MEMADD_SIZE_8BIT, stat, 1, HAL_MAX_DELAY) != HAL_OK) {
        status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f000 fb53 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f8a3 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f000 f957 	bl	8000d18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a6a:	f000 f927 	bl	8000cbc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000a6e:	f008 fb25 	bl	80090bc <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a72:	f000 f907 	bl	8000c84 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <main+0x130>)
 8000a7e:	f000 fe9f 	bl	80017c0 <HAL_GPIO_WritePin>
  AS5600_TypeDef *a = AS5600_New();
 8000a82:	f7ff fd21 	bl	80004c8 <AS5600_New>
 8000a86:	6078      	str	r0, [r7, #4]
  a->i2cHandle = &hi2c1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a40      	ldr	r2, [pc, #256]	@ (8000b8c <main+0x134>)
 8000a8c:	601a      	str	r2, [r3, #0]
  a->i2cAddr = 0x36 << 1;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	226c      	movs	r2, #108	@ 0x6c
 8000a92:	711a      	strb	r2, [r3, #4]

	// Read angular measurements
	uint8_t data[2] = {0};
 8000a94:	2300      	movs	r3, #0
 8000a96:	803b      	strh	r3, [r7, #0]
	AS5600_Init(a);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fd23 	bl	80004e4 <AS5600_Init>
	bool valueChanged = false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	70fb      	strb	r3, [r7, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (HAL_GetTick() - timeLastCycle > MAIN_CYLCE_TIME_MS) {
 8000aa2:	f000 fb97 	bl	80011d4 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b39      	ldr	r3, [pc, #228]	@ (8000b90 <main+0x138>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d9f7      	bls.n	8000aa2 <main+0x4a>
			//AS5600_GetAngle(a, &angle);
			handleEncoder(a);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f990 	bl	8000dd8 <handleEncoder>
			resolution_multiplier = 2;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	@ (8000b94 <main+0x13c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	701a      	strb	r2, [r3, #0]

			if (abs(encoder.relativeChangeToProcessedPosition) > 2) {
 8000abe:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <main+0x140>)
 8000ac0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bfb8      	it	lt
 8000ac8:	425b      	neglt	r3, r3
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d919      	bls.n	8000b04 <main+0xac>
				mouseReportContainer.wheel =
						encoder.relativeChangeToProcessedPosition
 8000ad0:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <main+0x140>)
 8000ad2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
				mouseReportContainer.wheel =
 8000ad6:	b29a      	uxth	r2, r3
								* WHEEL_STEPSIZE
								* abs(encoder.rotationSpeed); //WHEEL_STEPSIZE * encoder.relativeChangeToProcessedPosition/2;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <main+0x140>)
 8000ada:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
				mouseReportContainer.wheel =
 8000ae6:	fb12 f303 	smulbb	r3, r2, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <main+0x144>)
 8000af4:	f8a3 2003 	strh.w	r2, [r3, #3]
				encoder.processedAngle = encoder.angle;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <main+0x140>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <main+0x140>)
 8000b00:	819a      	strh	r2, [r3, #12]
 8000b02:	e004      	b.n	8000b0e <main+0xb6>
			} else {
				mouseReportContainer.wheel = 0;
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <main+0x144>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	70da      	strb	r2, [r3, #3]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	711a      	strb	r2, [r3, #4]
			}
			if (encoder.positionTime != lastEncoderState.positionTime)
 8000b0e:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <main+0x140>)
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <main+0x148>)
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d00d      	beq.n	8000b36 <main+0xde>
				encoder.rotationSpeed =
						encoder.relativeChangeToProcessedPosition
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <main+0x140>)
 8000b1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b20:	4619      	mov	r1, r3
								/ (encoder.positionTime
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <main+0x140>)
 8000b24:	691a      	ldr	r2, [r3, #16]
										- lastEncoderState.positionTime);
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <main+0x148>)
 8000b28:	691b      	ldr	r3, [r3, #16]
 8000b2a:	1ad3      	subs	r3, r2, r3
								/ (encoder.positionTime
 8000b2c:	fbb1 f3f3 	udiv	r3, r1, r3
				encoder.rotationSpeed =
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <main+0x140>)
 8000b34:	829a      	strh	r2, [r3, #20]

			if (mouseReportContainer.wheel != 0
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <main+0x144>)
 8000b38:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <main+0xf6>
					|| lastMouseReportContainer.wheel != 0)
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <main+0x14c>)
 8000b44:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <main+0x100>
				USBD_HID_SendReport(&hUsbDeviceFS,
 8000b4e:	2205      	movs	r2, #5
 8000b50:	4912      	ldr	r1, [pc, #72]	@ (8000b9c <main+0x144>)
 8000b52:	4815      	ldr	r0, [pc, #84]	@ (8000ba8 <main+0x150>)
 8000b54:	f006 ff0c 	bl	8007970 <USBD_HID_SendReport>
						(uint8_t*) &mouseReportContainer, 5);

			lastMouseReportContainer = mouseReportContainer;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <main+0x14c>)
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <main+0x144>)
 8000b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b60:	6018      	str	r0, [r3, #0]
 8000b62:	3304      	adds	r3, #4
 8000b64:	7019      	strb	r1, [r3, #0]
			lastEncoderState = encoder;
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <main+0x148>)
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <main+0x140>)
 8000b6a:	4614      	mov	r4, r2
 8000b6c:	461d      	mov	r5, r3
 8000b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b76:	e884 0003 	stmia.w	r4, {r0, r1}
			timeLastCycle = HAL_GetTick();
 8000b7a:	f000 fb2b 	bl	80011d4 <HAL_GetTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a03      	ldr	r2, [pc, #12]	@ (8000b90 <main+0x138>)
 8000b82:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - timeLastCycle > MAIN_CYLCE_TIME_MS) {
 8000b84:	e78d      	b.n	8000aa2 <main+0x4a>
 8000b86:	bf00      	nop
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	200001cc 	.word	0x200001cc
 8000b90:	200001c8 	.word	0x200001c8
 8000b94:	20000009 	.word	0x20000009
 8000b98:	20000198 	.word	0x20000198
 8000b9c:	20000220 	.word	0x20000220
 8000ba0:	200001b0 	.word	0x200001b0
 8000ba4:	20000228 	.word	0x20000228
 8000ba8:	20000240 	.word	0x20000240

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	@ 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 ff6e 	bl	8009a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2310      	movs	r3, #16
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c24:	230f      	movs	r3, #15
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c28:	2390      	movs	r3, #144	@ 0x90
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c30:	2305      	movs	r3, #5
 8000c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fd23 	bl	8005684 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c44:	f000 f92a 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 ff86 	bl	8005b74 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c6e:	f000 f915 	bl	8000e9c <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	@ 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	201f      	movs	r0, #31
 8000c8e:	f000 fbac 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c92:	201f      	movs	r0, #31
 8000c94:	f000 fbc5 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 fba4 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ca2:	2020      	movs	r0, #32
 8000ca4:	f000 fbbd 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2043      	movs	r0, #67	@ 0x43
 8000cae:	f000 fb9c 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000cb2:	2043      	movs	r0, #67	@ 0x43
 8000cb4:	f000 fbb5 	bl	8001422 <HAL_NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <MX_I2C1_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_I2C1_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cfa:	f000 fd7b 	bl	80017f4 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f8ca 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001cc 	.word	0x200001cc
 8000d10:	40005400 	.word	0x40005400
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_GPIO_Init+0xbc>)
 8000da6:	f000 fd0b 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_GPIO_Init+0xbc>)
 8000dc4:	f000 fb78 	bl	80014b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020800 	.word	0x40020800

08000dd8 <handleEncoder>:

/* USER CODE BEGIN 4 */

void handleEncoder(AS5600_TypeDef *a)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	AS5600_GetAngle(a, &encoder.rawAngle);
 8000de0:	492c      	ldr	r1, [pc, #176]	@ (8000e94 <handleEncoder+0xbc>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fde8 	bl	80009b8 <AS5600_GetAngle>

	if (encoder.rawAngle < 0xFFF/4 && lastEncoderState.rawAngle > 3*0xFFF/4)
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <handleEncoder+0xbc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d80e      	bhi.n	8000e12 <handleEncoder+0x3a>
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <handleEncoder+0xc0>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000dfc:	d309      	bcc.n	8000e12 <handleEncoder+0x3a>
		encoder.turnCounter ++;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <handleEncoder+0xbc>)
 8000e00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <handleEncoder+0xbc>)
 8000e0e:	805a      	strh	r2, [r3, #2]
 8000e10:	e013      	b.n	8000e3a <handleEncoder+0x62>
	else if (encoder.rawAngle > 3*0xFFF/4 && lastEncoderState.rawAngle < 0xFFF/4)
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <handleEncoder+0xbc>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e1a:	d30e      	bcc.n	8000e3a <handleEncoder+0x62>
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <handleEncoder+0xc0>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d808      	bhi.n	8000e3a <handleEncoder+0x62>
		encoder.turnCounter --;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <handleEncoder+0xbc>)
 8000e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <handleEncoder+0xbc>)
 8000e38:	805a      	strh	r2, [r3, #2]

	encoder.angle = encoder.turnCounter * 0xFFF + encoder.rawAngle;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <handleEncoder+0xbc>)
 8000e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4613      	mov	r3, r2
 8000e44:	031b      	lsls	r3, r3, #12
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <handleEncoder+0xbc>)
 8000e4a:	8812      	ldrh	r2, [r2, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <handleEncoder+0xbc>)
 8000e50:	6053      	str	r3, [r2, #4]
	encoder.relativeChange = lastEncoderState.angle - encoder.angle;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <handleEncoder+0xc0>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <handleEncoder+0xbc>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <handleEncoder+0xbc>)
 8000e66:	811a      	strh	r2, [r3, #8]
	encoder.relativeChangeToProcessedPosition = encoder.angle - encoder.processedAngle;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <handleEncoder+0xbc>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <handleEncoder+0xbc>)
 8000e70:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <handleEncoder+0xbc>)
 8000e7e:	815a      	strh	r2, [r3, #10]
	encoder.positionTime = HAL_GetTick();
 8000e80:	f000 f9a8 	bl	80011d4 <HAL_GetTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a03      	ldr	r2, [pc, #12]	@ (8000e94 <handleEncoder+0xbc>)
 8000e88:	6113      	str	r3, [r2, #16]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000198 	.word	0x20000198
 8000e98:	200001b0 	.word	0x200001b0

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	@ (8000f7c <HAL_I2C_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12b      	bne.n	8000f72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f36:	23c0      	movs	r3, #192	@ 0xc0
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f46:	2304      	movs	r3, #4
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <HAL_I2C_MspInit+0x8c>)
 8000f52:	f000 fab1 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f8e5 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <I2C1_EV_IRQHandler+0x10>)
 8000fee:	f001 f887 	bl	8002100 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001cc 	.word	0x200001cc

08000ffc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <I2C1_ER_IRQHandler+0x10>)
 8001002:	f001 f9d0 	bl	80023a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001cc 	.word	0x200001cc

08001010 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <OTG_FS_IRQHandler+0x10>)
 8001016:	f003 fa3e 	bl	8004496 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000071c 	.word	0x2000071c

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f008 fd3a 	bl	8009acc <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20020000 	.word	0x20020000
 8001084:	00000400 	.word	0x00000400
 8001088:	20000230 	.word	0x20000230
 800108c:	20000d60 	.word	0x20000d60

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f008 fcf9 	bl	8009ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fcb7 	bl	8000a58 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80010f8:	08009b98 	.word	0x08009b98
  ldr r2, =_sbss
 80010fc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001100:	20000d5c 	.word	0x20000d5c

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_Init+0x40>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_Init+0x40>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_Init+0x40>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f94f 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff feb4 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f967 	bl	800143e <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001188:	f000 f92f 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000234 	.word	0x20000234

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000234 	.word	0x20000234

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff3e 	bl	800127c <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d004      	beq.n	8001474 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e00c      	b.n	800148e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2205      	movs	r2, #5
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a8:	b2db      	uxtb	r3, r3
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e159      	b.n	8001788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8148 	bne.w	8001782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a2 	beq.w	8001782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b57      	ldr	r3, [pc, #348]	@ (80017a0 <HAL_GPIO_Init+0x2e8>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a56      	ldr	r2, [pc, #344]	@ (80017a0 <HAL_GPIO_Init+0x2e8>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b54      	ldr	r3, [pc, #336]	@ (80017a0 <HAL_GPIO_Init+0x2e8>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a52      	ldr	r2, [pc, #328]	@ (80017a4 <HAL_GPIO_Init+0x2ec>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a49      	ldr	r2, [pc, #292]	@ (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d019      	beq.n	80016ba <HAL_GPIO_Init+0x202>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a48      	ldr	r2, [pc, #288]	@ (80017ac <HAL_GPIO_Init+0x2f4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x1fe>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a47      	ldr	r2, [pc, #284]	@ (80017b0 <HAL_GPIO_Init+0x2f8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x1fa>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a46      	ldr	r2, [pc, #280]	@ (80017b4 <HAL_GPIO_Init+0x2fc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x1f6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a45      	ldr	r2, [pc, #276]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x1f2>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x204>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x204>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x204>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x204>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x204>
 80016ba:	2300      	movs	r3, #0
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f002 0203 	and.w	r2, r2, #3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016cc:	4935      	ldr	r1, [pc, #212]	@ (80017a4 <HAL_GPIO_Init+0x2ec>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <HAL_GPIO_Init+0x304>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a2f      	ldr	r2, [pc, #188]	@ (80017bc <HAL_GPIO_Init+0x304>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b2d      	ldr	r3, [pc, #180]	@ (80017bc <HAL_GPIO_Init+0x304>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a24      	ldr	r2, [pc, #144]	@ (80017bc <HAL_GPIO_Init+0x304>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172e:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <HAL_GPIO_Init+0x304>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001752:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <HAL_GPIO_Init+0x304>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <HAL_GPIO_Init+0x304>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177c:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <HAL_GPIO_Init+0x304>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f aea2 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	@ 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e12b      	b.n	8001a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fb6c 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001858:	f004 fb44 	bl	8005ee4 <HAL_RCC_GetPCLK1Freq>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a81      	ldr	r2, [pc, #516]	@ (8001a68 <HAL_I2C_Init+0x274>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d807      	bhi.n	8001878 <HAL_I2C_Init+0x84>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a80      	ldr	r2, [pc, #512]	@ (8001a6c <HAL_I2C_Init+0x278>)
 800186c:	4293      	cmp	r3, r2
 800186e:	bf94      	ite	ls
 8001870:	2301      	movls	r3, #1
 8001872:	2300      	movhi	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	e006      	b.n	8001886 <HAL_I2C_Init+0x92>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a70 <HAL_I2C_Init+0x27c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	bf94      	ite	ls
 8001880:	2301      	movls	r3, #1
 8001882:	2300      	movhi	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e7      	b.n	8001a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4a78      	ldr	r2, [pc, #480]	@ (8001a74 <HAL_I2C_Init+0x280>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001a68 <HAL_I2C_Init+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d802      	bhi.n	80018c8 <HAL_I2C_Init+0xd4>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	e009      	b.n	80018dc <HAL_I2C_Init+0xe8>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a69      	ldr	r2, [pc, #420]	@ (8001a78 <HAL_I2C_Init+0x284>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	3301      	adds	r3, #1
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	495c      	ldr	r1, [pc, #368]	@ (8001a68 <HAL_I2C_Init+0x274>)
 80018f8:	428b      	cmp	r3, r1
 80018fa:	d819      	bhi.n	8001930 <HAL_I2C_Init+0x13c>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e59      	subs	r1, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fbb1 f3f3 	udiv	r3, r1, r3
 800190a:	1c59      	adds	r1, r3, #1
 800190c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001910:	400b      	ands	r3, r1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <HAL_I2C_Init+0x138>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1e59      	subs	r1, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fbb1 f3f3 	udiv	r3, r1, r3
 8001924:	3301      	adds	r3, #1
 8001926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192a:	e051      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 800192c:	2304      	movs	r3, #4
 800192e:	e04f      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d111      	bne.n	800195c <HAL_I2C_Init+0x168>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	440b      	add	r3, r1
 8001946:	fbb0 f3f3 	udiv	r3, r0, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e012      	b.n	8001982 <HAL_I2C_Init+0x18e>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	0099      	lsls	r1, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Init+0x196>
 8001986:	2301      	movs	r3, #1
 8001988:	e022      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <HAL_I2C_Init+0x1bc>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e58      	subs	r0, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	440b      	add	r3, r1
 80019a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ae:	e00f      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1e58      	subs	r0, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6859      	ldr	r1, [r3, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	0099      	lsls	r1, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	6809      	ldr	r1, [r1, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6911      	ldr	r1, [r2, #16]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68d2      	ldr	r2, [r2, #12]
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	001e847f 	.word	0x001e847f
 8001a70:	003d08ff 	.word	0x003d08ff
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	d103      	bne.n	8001a9a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ac2:	f7ff fb87 	bl	80011d4 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	f040 80d9 	bne.w	8001c88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2319      	movs	r3, #25
 8001adc:	2201      	movs	r2, #1
 8001ade:	496d      	ldr	r1, [pc, #436]	@ (8001c94 <HAL_I2C_Mem_Write+0x1ec>)
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f002 f911 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0cc      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_I2C_Mem_Write+0x56>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e0c5      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d007      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2221      	movs	r2, #33	@ 0x21
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a4d      	ldr	r2, [pc, #308]	@ (8001c98 <HAL_I2C_Mem_Write+0x1f0>)
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b66:	88f8      	ldrh	r0, [r7, #6]
 8001b68:	893a      	ldrh	r2, [r7, #8]
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	4603      	mov	r3, r0
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f001 fea0 	bl	80038bc <I2C_RequestMemoryWrite>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d052      	beq.n	8001c28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e081      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f002 f9d6 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00d      	beq.n	8001bb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d107      	bne.n	8001bae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06b      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d11b      	bne.n	8001c28 <HAL_I2C_Mem_Write+0x180>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1aa      	bne.n	8001b86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f002 f9c9 	bl	8003fcc <I2C_WaitOnBTFFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d107      	bne.n	8001c58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e016      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	00100002 	.word	0x00100002
 8001c98:	ffff0000 	.word	0xffff0000

08001c9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	@ 0x30
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff fa8d 	bl	80011d4 <HAL_GetTick>
 8001cba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	f040 8214 	bne.w	80020f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	497b      	ldr	r1, [pc, #492]	@ (8001ec0 <HAL_I2C_Mem_Read+0x224>)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f002 f817 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e207      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Mem_Read+0x56>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e200      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2222      	movs	r2, #34	@ 0x22
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a5b      	ldr	r2, [pc, #364]	@ (8001ec4 <HAL_I2C_Mem_Read+0x228>)
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d5a:	88f8      	ldrh	r0, [r7, #6]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4603      	mov	r3, r0
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f001 fe3c 	bl	80039e8 <I2C_RequestMemoryRead>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1bc      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d113      	bne.n	8001daa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	623b      	str	r3, [r7, #32]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e190      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d11b      	bne.n	8001dea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e170      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d11b      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	e150      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e40:	e144      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	f200 80f1 	bhi.w	800202e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d123      	bne.n	8001e9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f002 f931 	bl	80040c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e145      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e9a:	e117      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d14e      	bne.n	8001f42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4906      	ldr	r1, [pc, #24]	@ (8001ec8 <HAL_I2C_Mem_Read+0x22c>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f001 ff2a 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e11a      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
 8001ebe:	bf00      	nop
 8001ec0:	00100002 	.word	0x00100002
 8001ec4:	ffff0000 	.word	0xffff0000
 8001ec8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f40:	e0c4      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f48:	2200      	movs	r2, #0
 8001f4a:	496c      	ldr	r1, [pc, #432]	@ (80020fc <HAL_I2C_Mem_Read+0x460>)
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f001 fedb 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cb      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4955      	ldr	r1, [pc, #340]	@ (80020fc <HAL_I2C_Mem_Read+0x460>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f001 fead 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e09d      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800202c:	e04e      	b.n	80020cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f002 f844 	bl	80040c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e058      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d124      	bne.n	80020cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	2b03      	cmp	r3, #3
 8002088:	d107      	bne.n	800209a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002098:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f aeb6 	bne.w	8001e42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	@ 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00010004 	.word	0x00010004

08002100 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002120:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002128:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b10      	cmp	r3, #16
 800212e:	d003      	beq.n	8002138 <HAL_I2C_EV_IRQHandler+0x38>
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b40      	cmp	r3, #64	@ 0x40
 8002134:	f040 80b1 	bne.w	800229a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_I2C_EV_IRQHandler+0x6e>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002158:	d003      	beq.n	8002162 <HAL_I2C_EV_IRQHandler+0x62>
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002160:	d101      	bne.n	8002166 <HAL_I2C_EV_IRQHandler+0x66>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x68>
 8002166:	2300      	movs	r3, #0
 8002168:	2b01      	cmp	r3, #1
 800216a:	f000 8114 	beq.w	8002396 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x90>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f002 f828 	bl	80041d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fd7a 	bl	8002c82 <I2C_Master_SB>
 800218e:	e083      	b.n	8002298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0xac>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fdf2 	bl	8002d8e <I2C_Master_ADD10>
 80021aa:	e075      	b.n	8002298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0xc8>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fe0e 	bl	8002de2 <I2C_Master_ADDR>
 80021c6:	e067      	b.n	8002298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d036      	beq.n	8002240 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021e0:	f000 80db 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x10a>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x10a>
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f9d6 	bl	80025b4 <I2C_MasterTransmit_TXE>
 8002208:	e046      	b.n	8002298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80c2 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80bc 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	2b21      	cmp	r3, #33	@ 0x21
 8002226:	d103      	bne.n	8002230 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fa5f 	bl	80026ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800222e:	e0b4      	b.n	800239a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	f040 80b1 	bne.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 facd 	bl	80027d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800223e:	e0ac      	b.n	800239a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800224a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800224e:	f000 80a4 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <HAL_I2C_EV_IRQHandler+0x178>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_I2C_EV_IRQHandler+0x178>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fb49 	bl	8002908 <I2C_MasterReceive_RXNE>
 8002276:	e00f      	b.n	8002298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 808b 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8085 	beq.w	800239a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fc01 	bl	8002a98 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002296:	e080      	b.n	800239a <HAL_I2C_EV_IRQHandler+0x29a>
 8002298:	e07f      	b.n	800239a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e007      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x1ea>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00c      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 ffcc 	bl	8003280 <I2C_Slave_ADDR>
 80022e8:	e05a      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0x206>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f001 f806 	bl	8003310 <I2C_Slave_STOPF>
 8002304:	e04c      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	2b21      	cmp	r3, #33	@ 0x21
 800230a:	d002      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x212>
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	2b29      	cmp	r3, #41	@ 0x29
 8002310:	d120      	bne.n	8002354 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_I2C_EV_IRQHandler+0x238>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_I2C_EV_IRQHandler+0x238>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fee7 	bl	8003104 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002336:	e032      	b.n	800239e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d02d      	beq.n	800239e <HAL_I2C_EV_IRQHandler+0x29e>
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002348:	2b00      	cmp	r3, #0
 800234a:	d028      	beq.n	800239e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 ff16 	bl	800317e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002352:	e024      	b.n	800239e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_EV_IRQHandler+0x27a>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_I2C_EV_IRQHandler+0x27a>
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 ff24 	bl	80031c0 <I2C_SlaveReceive_RXNE>
 8002378:	e012      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 ff54 	bl	800323c <I2C_SlaveReceive_BTF>
 8002394:	e004      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002396:	bf00      	nop
 8002398:	e002      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800239a:	bf00      	nop
 800239c:	e000      	b.n	80023a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800239e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b08a      	sub	sp, #40	@ 0x28
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_I2C_ER_IRQHandler+0x4a>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80023ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <HAL_I2C_ER_IRQHandler+0x70>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002414:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03e      	beq.n	800249e <HAL_I2C_ER_IRQHandler+0xf8>
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d039      	beq.n	800249e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800242a:	7efb      	ldrb	r3, [r7, #27]
 800242c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800243c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002444:	7ebb      	ldrb	r3, [r7, #26]
 8002446:	2b20      	cmp	r3, #32
 8002448:	d112      	bne.n	8002470 <HAL_I2C_ER_IRQHandler+0xca>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <HAL_I2C_ER_IRQHandler+0xca>
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b21      	cmp	r3, #33	@ 0x21
 8002454:	d008      	beq.n	8002468 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b29      	cmp	r3, #41	@ 0x29
 800245a:	d005      	beq.n	8002468 <HAL_I2C_ER_IRQHandler+0xc2>
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b28      	cmp	r3, #40	@ 0x28
 8002460:	d106      	bne.n	8002470 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b21      	cmp	r3, #33	@ 0x21
 8002466:	d103      	bne.n	8002470 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f001 f881 	bl	8003570 <I2C_Slave_AF>
 800246e:	e016      	b.n	800249e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002478:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002482:	7efb      	ldrb	r3, [r7, #27]
 8002484:	2b10      	cmp	r3, #16
 8002486:	d002      	beq.n	800248e <HAL_I2C_ER_IRQHandler+0xe8>
 8002488:	7efb      	ldrb	r3, [r7, #27]
 800248a:	2b40      	cmp	r3, #64	@ 0x40
 800248c:	d107      	bne.n	800249e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_I2C_ER_IRQHandler+0x11e>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80024c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f001 f8be 	bl	8003658 <I2C_ITError>
  }
}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	@ 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
 8002540:	4613      	mov	r3, r2
 8002542:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d150      	bne.n	800267c <I2C_MasterTransmit_TXE+0xc8>
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b21      	cmp	r3, #33	@ 0x21
 80025de:	d14d      	bne.n	800267c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d01d      	beq.n	8002622 <I2C_MasterTransmit_TXE+0x6e>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d01a      	beq.n	8002622 <I2C_MasterTransmit_TXE+0x6e>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f2:	d016      	beq.n	8002622 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002602:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2211      	movs	r2, #17
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff62 	bl	80024e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002620:	e060      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002630:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002640:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	d107      	bne.n	800266c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff7d 	bl	8002564 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800266a:	e03b      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff35 	bl	80024e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800267a:	e033      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b21      	cmp	r3, #33	@ 0x21
 8002680:	d005      	beq.n	800268e <I2C_MasterTransmit_TXE+0xda>
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d12d      	bne.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b22      	cmp	r3, #34	@ 0x22
 800268c:	d12a      	bne.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80026a8:	e01c      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	d103      	bne.n	80026be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f88e 	bl	80027d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80026bc:	e012      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026e2:	e7ff      	b.n	80026e4 <I2C_MasterTransmit_TXE+0x130>
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b21      	cmp	r3, #33	@ 0x21
 8002704:	d164      	bne.n	80027d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002734:	e04c      	b.n	80027d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d01d      	beq.n	8002778 <I2C_MasterTransmit_BTF+0x8c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b20      	cmp	r3, #32
 8002740:	d01a      	beq.n	8002778 <I2C_MasterTransmit_BTF+0x8c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002748:	d016      	beq.n	8002778 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002758:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2211      	movs	r2, #17
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff feb7 	bl	80024e4 <HAL_I2C_MasterTxCpltCallback>
}
 8002776:	e02b      	b.n	80027d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002786:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002796:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d107      	bne.n	80027c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fed2 	bl	8002564 <HAL_I2C_MemTxCpltCallback>
}
 80027c0:	e006      	b.n	80027d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe8a 	bl	80024e4 <HAL_I2C_MasterTxCpltCallback>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10b      	bne.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002808:	1c9a      	adds	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800280e:	e077      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002814:	b29b      	uxth	r3, r3
 8002816:	121b      	asrs	r3, r3, #8
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800282a:	e069      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10b      	bne.n	800284c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002838:	b2da      	uxtb	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800284a:	e059      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002850:	2b02      	cmp	r3, #2
 8002852:	d152      	bne.n	80028fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b22      	cmp	r3, #34	@ 0x22
 8002858:	d10d      	bne.n	8002876 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002868:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002874:	e044      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b21      	cmp	r3, #33	@ 0x21
 8002884:	d112      	bne.n	80028ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028aa:	e029      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d124      	bne.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b21      	cmp	r3, #33	@ 0x21
 80028ba:	d121      	bne.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fe36 	bl	8002564 <HAL_I2C_MemTxCpltCallback>
}
 80028f8:	e002      	b.n	8002900 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff f8be 	bl	8001a7c <I2C_Flush_DR>
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b22      	cmp	r3, #34	@ 0x22
 800291a:	f040 80b9 	bne.w	8002a90 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d921      	bls.n	8002976 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b03      	cmp	r3, #3
 8002960:	f040 8096 	bne.w	8002a90 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002972:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002974:	e08c      	b.n	8002a90 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	2b02      	cmp	r3, #2
 800297c:	d07f      	beq.n	8002a7e <I2C_MasterReceive_RXNE+0x176>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <I2C_MasterReceive_RXNE+0x82>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d179      	bne.n	8002a7e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f001 fb66 	bl	800405c <I2C_WaitOnSTOPRequestThroughIT>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d14c      	bne.n	8002a30 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b40      	cmp	r3, #64	@ 0x40
 80029ee:	d10a      	bne.n	8002a06 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fdba 	bl	8002578 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a04:	e044      	b.n	8002a90 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d002      	beq.n	8002a1a <I2C_MasterReceive_RXNE+0x112>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d103      	bne.n	8002a22 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a20:	e002      	b.n	8002a28 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2212      	movs	r2, #18
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fd65 	bl	80024f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a2e:	e02f      	b.n	8002a90 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fd88 	bl	800258c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a7c:	e008      	b.n	8002a90 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8c:	605a      	str	r2, [r3, #4]
}
 8002a8e:	e7ff      	b.n	8002a90 <I2C_MasterReceive_RXNE+0x188>
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ae6:	e0c8      	b.n	8002c7a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d129      	bne.n	8002b46 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00a      	beq.n	8002b1e <I2C_MasterReceive_BTF+0x86>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d007      	beq.n	8002b1e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b44:	e099      	b.n	8002c7a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f040 8081 	bne.w	8002c54 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d002      	beq.n	8002b5e <I2C_MasterReceive_BTF+0xc6>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d108      	bne.n	8002b70 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e019      	b.n	8002ba4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <I2C_MasterReceive_BTF+0xe4>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d108      	bne.n	8002b8e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e00a      	b.n	8002ba4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d007      	beq.n	8002ba4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002bfe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d10a      	bne.n	8002c2a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fca8 	bl	8002578 <HAL_I2C_MemRxCpltCallback>
}
 8002c28:	e027      	b.n	8002c7a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d002      	beq.n	8002c3e <I2C_MasterReceive_BTF+0x1a6>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d103      	bne.n	8002c46 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c44:	e002      	b.n	8002c4c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2212      	movs	r2, #18
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fc53 	bl	80024f8 <HAL_I2C_MasterRxCpltCallback>
}
 8002c52:	e012      	b.n	8002c7a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d117      	bne.n	8002cc6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002cb0:	e067      	b.n	8002d82 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]
}
 8002cc4:	e05d      	b.n	8002d82 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cce:	d133      	bne.n	8002d38 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b21      	cmp	r3, #33	@ 0x21
 8002cda:	d109      	bne.n	8002cf0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e008      	b.n	8002d02 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <I2C_Master_SB+0x92>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d108      	bne.n	8002d26 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d032      	beq.n	8002d82 <I2C_Master_SB+0x100>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02d      	beq.n	8002d82 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d34:	605a      	str	r2, [r3, #4]
}
 8002d36:	e024      	b.n	8002d82 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10e      	bne.n	8002d5e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	11db      	asrs	r3, r3, #7
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0306 	and.w	r3, r3, #6
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f063 030f 	orn	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]
}
 8002d5c:	e011      	b.n	8002d82 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10d      	bne.n	8002d82 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	11db      	asrs	r3, r3, #7
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 0306 	and.w	r3, r3, #6
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f063 030e 	orn	r3, r3, #14
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	611a      	str	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <I2C_Master_ADD10+0x26>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00c      	beq.n	8002dd6 <I2C_Master_ADD10+0x48>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd4:	605a      	str	r2, [r3, #4]
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b091      	sub	sp, #68	@ 0x44
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002df0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b22      	cmp	r3, #34	@ 0x22
 8002e0a:	f040 8169 	bne.w	80030e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <I2C_Master_ADDR+0x54>
 8002e16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	d10b      	bne.n	8002e36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	e160      	b.n	80030f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11d      	bne.n	8002e7a <I2C_Master_ADDR+0x98>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002e46:	d118      	bne.n	8002e7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e78:	e13e      	b.n	80030f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d113      	bne.n	8002eac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e115      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 808a 	bne.w	8002fcc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ebe:	d137      	bne.n	8002f30 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ece:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ede:	d113      	bne.n	8002f08 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	e0e7      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e0d3      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d02e      	beq.n	8002f94 <I2C_Master_ADDR+0x1b2>
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d02b      	beq.n	8002f94 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d102      	bne.n	8002f48 <I2C_Master_ADDR+0x166>
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d125      	bne.n	8002f94 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00e      	beq.n	8002f6c <I2C_Master_ADDR+0x18a>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d00b      	beq.n	8002f6c <I2C_Master_ADDR+0x18a>
 8002f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d008      	beq.n	8002f6c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e007      	b.n	8002f7c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f7a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	e0a1      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e085      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d14d      	bne.n	8003072 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d016      	beq.n	800300a <I2C_Master_ADDR+0x228>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d013      	beq.n	800300a <I2C_Master_ADDR+0x228>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d010      	beq.n	800300a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003018:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003028:	d117      	bne.n	800305a <I2C_Master_ADDR+0x278>
 800302a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003030:	d00b      	beq.n	800304a <I2C_Master_ADDR+0x268>
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2b01      	cmp	r3, #1
 8003036:	d008      	beq.n	800304a <I2C_Master_ADDR+0x268>
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	2b08      	cmp	r3, #8
 800303c:	d005      	beq.n	800304a <I2C_Master_ADDR+0x268>
 800303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003040:	2b10      	cmp	r3, #16
 8003042:	d002      	beq.n	800304a <I2C_Master_ADDR+0x268>
 8003044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003046:	2b20      	cmp	r3, #32
 8003048:	d107      	bne.n	800305a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003058:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	e032      	b.n	80030d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003080:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003090:	d117      	bne.n	80030c2 <I2C_Master_ADDR+0x2e0>
 8003092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003094:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003098:	d00b      	beq.n	80030b2 <I2C_Master_ADDR+0x2d0>
 800309a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309c:	2b01      	cmp	r3, #1
 800309e:	d008      	beq.n	80030b2 <I2C_Master_ADDR+0x2d0>
 80030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d005      	beq.n	80030b2 <I2C_Master_ADDR+0x2d0>
 80030a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d002      	beq.n	80030b2 <I2C_Master_ADDR+0x2d0>
 80030ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d107      	bne.n	80030c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80030de:	e00b      	b.n	80030f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	e7ff      	b.n	80030f8 <I2C_Master_ADDR+0x316>
 80030f8:	bf00      	nop
 80030fa:	3744      	adds	r7, #68	@ 0x44
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d02b      	beq.n	8003176 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <I2C_SlaveTransmit_TXE+0x72>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b29      	cmp	r3, #41	@ 0x29
 8003150:	d111      	bne.n	8003176 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003160:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2221      	movs	r2, #33	@ 0x21
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2228      	movs	r2, #40	@ 0x28
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff f9cb 	bl	800250c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d011      	beq.n	80031b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02c      	beq.n	8003234 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <I2C_SlaveReceive_RXNE+0x74>
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b2a      	cmp	r3, #42	@ 0x2a
 800320e:	d111      	bne.n	8003234 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2222      	movs	r2, #34	@ 0x22
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2228      	movs	r2, #40	@ 0x28
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff f976 	bl	8002520 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800329a:	2b28      	cmp	r3, #40	@ 0x28
 800329c:	d125      	bne.n	80032ea <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	81bb      	strh	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80032dc:	89ba      	ldrh	r2, [r7, #12]
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff f926 	bl	8002534 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032e8:	e00e      	b.n	8003308 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800332e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800336c:	d172      	bne.n	8003454 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b22      	cmp	r3, #34	@ 0x22
 8003372:	d002      	beq.n	800337a <I2C_Slave_STOPF+0x6a>
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b2a      	cmp	r3, #42	@ 0x2a
 8003378:	d135      	bne.n	80033e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe f871 	bl	800149a <HAL_DMA_GetState>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d049      	beq.n	8003452 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	4a69      	ldr	r2, [pc, #420]	@ (8003568 <I2C_Slave_STOPF+0x258>)
 80033c4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f843 	bl	8001456 <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03d      	beq.n	8003452 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033e4:	e035      	b.n	8003452 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003418:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f83b 	bl	800149a <HAL_DMA_GetState>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d014      	beq.n	8003454 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	4a4e      	ldr	r2, [pc, #312]	@ (8003568 <I2C_Slave_STOPF+0x258>)
 8003430:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f80d 	bl	8001456 <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
 8003450:	e000      	b.n	8003454 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003452:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03e      	beq.n	80034dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d112      	bne.n	8003492 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d112      	bne.n	80034c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8b7 	bl	8003658 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034ea:	e039      	b.n	8003560 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80034f0:	d109      	bne.n	8003506 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2228      	movs	r2, #40	@ 0x28
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff f80d 	bl	8002520 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b28      	cmp	r3, #40	@ 0x28
 8003510:	d111      	bne.n	8003536 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a15      	ldr	r2, [pc, #84]	@ (800356c <I2C_Slave_STOPF+0x25c>)
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff f80e 	bl	8002550 <HAL_I2C_ListenCpltCallback>
}
 8003534:	e014      	b.n	8003560 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	2b22      	cmp	r3, #34	@ 0x22
 800353c:	d002      	beq.n	8003544 <I2C_Slave_STOPF+0x234>
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b22      	cmp	r3, #34	@ 0x22
 8003542:	d10d      	bne.n	8003560 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe ffe0 	bl	8002520 <HAL_I2C_SlaveRxCpltCallback>
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08003bb9 	.word	0x08003bb9
 800356c:	ffff0000 	.word	0xffff0000

08003570 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d002      	beq.n	8003592 <I2C_Slave_AF+0x22>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d129      	bne.n	80035e6 <I2C_Slave_AF+0x76>
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2b28      	cmp	r3, #40	@ 0x28
 8003596:	d126      	bne.n	80035e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2e      	ldr	r2, [pc, #184]	@ (8003654 <I2C_Slave_AF+0xe4>)
 800359c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe ffb6 	bl	8002550 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80035e4:	e031      	b.n	800364a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b21      	cmp	r3, #33	@ 0x21
 80035ea:	d129      	bne.n	8003640 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a19      	ldr	r2, [pc, #100]	@ (8003654 <I2C_Slave_AF+0xe4>)
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2221      	movs	r2, #33	@ 0x21
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003616:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003620:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe fa22 	bl	8001a7c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fe ff67 	bl	800250c <HAL_I2C_SlaveTxCpltCallback>
}
 800363e:	e004      	b.n	800364a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	ffff0000 	.word	0xffff0000

08003658 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003666:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800366e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b10      	cmp	r3, #16
 8003674:	d002      	beq.n	800367c <I2C_ITError+0x24>
 8003676:	7bbb      	ldrb	r3, [r7, #14]
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d10a      	bne.n	8003692 <I2C_ITError+0x3a>
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b22      	cmp	r3, #34	@ 0x22
 8003680:	d107      	bne.n	8003692 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003690:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003698:	2b28      	cmp	r3, #40	@ 0x28
 800369a:	d107      	bne.n	80036ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2228      	movs	r2, #40	@ 0x28
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036aa:	e015      	b.n	80036d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ba:	d00a      	beq.n	80036d2 <I2C_ITError+0x7a>
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b60      	cmp	r3, #96	@ 0x60
 80036c0:	d007      	beq.n	80036d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e6:	d162      	bne.n	80037ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d020      	beq.n	8003748 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	4a6a      	ldr	r2, [pc, #424]	@ (80038b4 <I2C_ITError+0x25c>)
 800370c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fe9f 	bl	8001456 <HAL_DMA_Abort_IT>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8089 	beq.w	8003832 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003742:	4610      	mov	r0, r2
 8003744:	4798      	blx	r3
 8003746:	e074      	b.n	8003832 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	4a59      	ldr	r2, [pc, #356]	@ (80038b4 <I2C_ITError+0x25c>)
 800374e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fe7e 	bl	8001456 <HAL_DMA_Abort_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d068      	beq.n	8003832 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d10b      	bne.n	8003786 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037a8:	4610      	mov	r0, r2
 80037aa:	4798      	blx	r3
 80037ac:	e041      	b.n	8003832 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b60      	cmp	r3, #96	@ 0x60
 80037b8:	d125      	bne.n	8003806 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	d10b      	bne.n	80037ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fece 	bl	80025a0 <HAL_I2C_AbortCpltCallback>
 8003804:	e015      	b.n	8003832 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	d10b      	bne.n	800382c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fe fead 	bl	800258c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10e      	bne.n	8003860 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003876:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d113      	bne.n	80038ac <I2C_ITError+0x254>
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b28      	cmp	r3, #40	@ 0x28
 8003888:	d110      	bne.n	80038ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <I2C_ITError+0x260>)
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fe52 	bl	8002550 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	08003bb9 	.word	0x08003bb9
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fa08 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390c:	d103      	bne.n	8003916 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003914:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e05f      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	492d      	ldr	r1, [pc, #180]	@ (80039e4 <I2C_RequestMemoryWrite+0x128>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fa63 	bl	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04c      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 faee 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e02b      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	e021      	b.n	80039d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003994:	893b      	ldrh	r3, [r7, #8]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fac8 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d107      	bne.n	80039ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e005      	b.n	80039da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ce:	893b      	ldrh	r3, [r7, #8]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00010002 	.word	0x00010002

080039e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f96a 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a48:	d103      	bne.n	8003a52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0aa      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	4952      	ldr	r1, [pc, #328]	@ (8003bb4 <I2C_RequestMemoryRead+0x1cc>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9c5 	bl	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e097      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fa50 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e076      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e021      	b.n	8003b14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad0:	893b      	ldrh	r3, [r7, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa2a 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e050      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	6a39      	ldr	r1, [r7, #32]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fa0f 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d107      	bne.n	8003b3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e035      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f8d3 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b76:	d103      	bne.n	8003b80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e013      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b84:	897b      	ldrh	r3, [r7, #10]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	6a3a      	ldr	r2, [r7, #32]
 8003b98:	4906      	ldr	r1, [pc, #24]	@ (8003bb4 <I2C_RequestMemoryRead+0x1cc>)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f92e 	bl	8003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	00010002 	.word	0x00010002

08003bb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003d00 <I2C_DMAAbort+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <I2C_DMAAbort+0x14c>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0a1a      	lsrs	r2, r3, #8
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00da      	lsls	r2, r3, #3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003bfe:	e00a      	b.n	8003c16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c14:	d0ea      	beq.n	8003bec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	2200      	movs	r2, #0
 8003c24:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	2200      	movs	r2, #0
 8003c34:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	2200      	movs	r2, #0
 8003c5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b60      	cmp	r3, #96	@ 0x60
 8003c86:	d10e      	bne.n	8003ca6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7fe fc7e 	bl	80025a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ca4:	e027      	b.n	8003cf6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cac:	2b28      	cmp	r3, #40	@ 0x28
 8003cae:	d117      	bne.n	8003ce0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2228      	movs	r2, #40	@ 0x28
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cde:	e007      	b.n	8003cf0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f7fe fc4b 	bl	800258c <HAL_I2C_ErrorCallback>
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000
 8003d04:	14f8b589 	.word	0x14f8b589

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e048      	b.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d20:	d044      	beq.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fd fa57 	bl	80011d4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d139      	bne.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10d      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	e00c      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d116      	bne.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e023      	b.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10d      	bne.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	e00c      	b.n	8003dec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d093      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0a:	e071      	b.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d123      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e067      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e6a:	d041      	beq.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fd f9b2 	bl	80011d4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d136      	bne.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10c      	bne.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e00b      	b.n	8003ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	43da      	mvns	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e021      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10c      	bne.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	43da      	mvns	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e00b      	b.n	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f af6d 	bne.w	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	e034      	b.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f915 	bl	800417a <I2C_IsAcknowledgeFailed>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e034      	b.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f60:	d028      	beq.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fd f937 	bl	80011d4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b80      	cmp	r3, #128	@ 0x80
 8003f84:	d016      	beq.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e007      	b.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b80      	cmp	r3, #128	@ 0x80
 8003fc0:	d1c3      	bne.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd8:	e034      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f8cd 	bl	800417a <I2C_IsAcknowledgeFailed>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e034      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ff0:	d028      	beq.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fd f8ef 	bl	80011d4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11d      	bne.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b04      	cmp	r3, #4
 8004014:	d016      	beq.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d1c3      	bne.n	8003fda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	4a13      	ldr	r2, [pc, #76]	@ (80040bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0a1a      	lsrs	r2, r3, #8
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b01      	subs	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e008      	b.n	80040ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a8:	d0e9      	beq.n	800407e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20000000 	.word	0x20000000
 80040bc:	14f8b589 	.word	0x14f8b589

080040c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040cc:	e049      	b.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d119      	bne.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0210 	mvn.w	r2, #16
 80040e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e030      	b.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fd f860 	bl	80011d4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11d      	bne.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d016      	beq.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e007      	b.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d1ae      	bne.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004190:	d11b      	bne.n	80041ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800419a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80041e8:	d103      	bne.n	80041f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041f0:	e007      	b.n	8004202 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80041fa:	d102      	bne.n	8004202 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2208      	movs	r2, #8
 8004200:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af02      	add	r7, sp, #8
 8004214:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e101      	b.n	8004424 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f005 f874 	bl	8009328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2203      	movs	r2, #3
 8004244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800424e:	d102      	bne.n	8004256 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 ff6d 	bl	800613a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7c1a      	ldrb	r2, [r3, #16]
 8004268:	f88d 2000 	strb.w	r2, [sp]
 800426c:	3304      	adds	r3, #4
 800426e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004270:	f001 fe4c 	bl	8005f0c <USB_CoreInit>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0ce      	b.n	8004424 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 ff65 	bl	800615c <USB_SetCurrentMode>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0bf      	b.n	8004424 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e04a      	b.n	8004340 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3315      	adds	r3, #21
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3314      	adds	r3, #20
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	b298      	uxth	r0, r3
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	332e      	adds	r3, #46	@ 0x2e
 80042e6:	4602      	mov	r2, r0
 80042e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3318      	adds	r3, #24
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	331c      	adds	r3, #28
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3320      	adds	r3, #32
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3324      	adds	r3, #36	@ 0x24
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	3301      	adds	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3af      	bcc.n	80042aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e044      	b.n	80043da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	3301      	adds	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	791b      	ldrb	r3, [r3, #4]
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d3b5      	bcc.n	8004350 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7c1a      	ldrb	r2, [r3, #16]
 80043ec:	f88d 2000 	strb.w	r2, [sp]
 80043f0:	3304      	adds	r3, #4
 80043f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043f4:	f001 fefe 	bl	80061f4 <USB_DevInit>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00c      	b.n	8004424 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f002 ff48 	bl	80072b2 <USB_DevDisconnect>

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_Start+0x1c>
 8004444:	2302      	movs	r3, #2
 8004446:	e022      	b.n	800448e <HAL_PCD_Start+0x62>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f001 fe4f 	bl	8006118 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fef6 	bl	8007270 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004496:	b590      	push	{r4, r7, lr}
 8004498:	b08d      	sub	sp, #52	@ 0x34
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f002 ffb4 	bl	800741a <USB_GetMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 848c 	bne.w	8004dd2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 ff18 	bl	80072f4 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8482 	beq.w	8004dd0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f002 ff05 	bl	80072f4 <USB_ReadInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d107      	bne.n	8004504 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f002 0202 	and.w	r2, r2, #2
 8004502:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f002 fef3 	bl	80072f4 <USB_ReadInterrupts>
 800450e:	4603      	mov	r3, r0
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d161      	bne.n	80045dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0210 	bic.w	r2, r2, #16
 8004526:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 020f 	and.w	r2, r3, #15
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	3304      	adds	r3, #4
 8004546:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	0c5b      	lsrs	r3, r3, #17
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	2b02      	cmp	r3, #2
 8004552:	d124      	bne.n	800459e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d035      	beq.n	80045cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800456a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	6a38      	ldr	r0, [r7, #32]
 8004574:	f002 fd2a 	bl	8006fcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004584:	441a      	add	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004596:	441a      	add	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	615a      	str	r2, [r3, #20]
 800459c:	e016      	b.n	80045cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	0c5b      	lsrs	r3, r3, #17
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d110      	bne.n	80045cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045b0:	2208      	movs	r2, #8
 80045b2:	4619      	mov	r1, r3
 80045b4:	6a38      	ldr	r0, [r7, #32]
 80045b6:	f002 fd09 	bl	8006fcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c6:	441a      	add	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0210 	orr.w	r2, r2, #16
 80045da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f002 fe87 	bl	80072f4 <USB_ReadInterrupts>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045f0:	f040 80a7 	bne.w	8004742 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fe8c 	bl	800731a <USB_ReadDevAllOutEpInterrupt>
 8004602:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004604:	e099      	b.n	800473a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 808e 	beq.w	800472e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f002 feb0 	bl	8007382 <USB_ReadDevOutEPInterrupt>
 8004622:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	2301      	movs	r3, #1
 800463e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fe8c 	bl	8005360 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2308      	movs	r3, #8
 8004662:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 ff62 	bl	8005530 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	2310      	movs	r3, #16
 8004686:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d030      	beq.n	80046f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	d109      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f004 ff17 	bl	8009510 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2302      	movs	r3, #2
 80046f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	2320      	movs	r3, #32
 800470e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004726:	461a      	mov	r2, r3
 8004728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800472c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	3301      	adds	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	f47f af62 	bne.w	8004606 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fdd4 	bl	80072f4 <USB_ReadInterrupts>
 800474c:	4603      	mov	r3, r0
 800474e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004756:	f040 80db 	bne.w	8004910 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fdf5 	bl	800734e <USB_ReadDevAllInEpInterrupt>
 8004764:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800476a:	e0cd      	b.n	8004908 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80c2 	beq.w	80048fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f002 fe1b 	bl	80073be <USB_ReadDevInEPInterrupt>
 8004788:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d057      	beq.n	8004844 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	2201      	movs	r2, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047b4:	4013      	ands	r3, r2
 80047b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	2301      	movs	r3, #1
 80047c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	799b      	ldrb	r3, [r3, #6]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d132      	bne.n	8004838 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3320      	adds	r3, #32
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	331c      	adds	r3, #28
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4419      	add	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	3320      	adds	r3, #32
 8004808:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <HAL_PCD_IRQHandler+0x3a2>
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3324      	adds	r3, #36	@ 0x24
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004830:	461a      	mov	r2, r3
 8004832:	2101      	movs	r1, #1
 8004834:	f002 fe22 	bl	800747c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f004 fdeb 	bl	800941a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800485a:	461a      	mov	r2, r3
 800485c:	2308      	movs	r3, #8
 800485e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004876:	461a      	mov	r2, r3
 8004878:	2310      	movs	r3, #16
 800487a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004892:	461a      	mov	r2, r3
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d023      	beq.n	80048ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a4:	6a38      	ldr	r0, [r7, #32]
 80048a6:	f001 fe09 	bl	80064bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	3310      	adds	r3, #16
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	3304      	adds	r3, #4
 80048bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	78db      	ldrb	r3, [r3, #3]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f004 fe2e 	bl	8009534 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e4:	461a      	mov	r2, r3
 80048e6:	2302      	movs	r3, #2
 80048e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fca5 	bl	8005246 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	3301      	adds	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	f47f af2e 	bne.w	800476c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f002 fced 	bl	80072f4 <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004924:	d122      	bne.n	800496c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004940:	2b01      	cmp	r3, #1
 8004942:	d108      	bne.n	8004956 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800494c:	2100      	movs	r1, #0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fe8c 	bl	800566c <HAL_PCDEx_LPM_Callback>
 8004954:	e002      	b.n	800495c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f004 fdcc 	bl	80094f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800496a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fcbf 	bl	80072f4 <USB_ReadInterrupts>
 8004976:	4603      	mov	r3, r0
 8004978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d112      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f004 fd88 	bl	80094a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80049a6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 fca1 	bl	80072f4 <USB_ReadInterrupts>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049bc:	f040 80b7 	bne.w	8004b2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2110      	movs	r1, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fd6e 	bl	80064bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e4:	e046      	b.n	8004a74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	461a      	mov	r2, r3
 80049f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a26:	461a      	mov	r2, r3
 8004a28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	3301      	adds	r3, #1
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d3b2      	bcc.n	80049e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7bdb      	ldrb	r3, [r3, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d016      	beq.n	8004aca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aac:	f043 030b 	orr.w	r3, r3, #11
 8004ab0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ac2:	f043 030b 	orr.w	r3, r3, #11
 8004ac6:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ac8:	e015      	b.n	8004af6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ad8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004adc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004ae0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af0:	f043 030b 	orr.w	r3, r3, #11
 8004af4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f002 fcaf 	bl	800747c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f002 fbde 	bl	80072f4 <USB_ReadInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b42:	d123      	bne.n	8004b8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 fc74 	bl	8007436 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fd2b 	bl	80065ae <USB_GetDevSpeed>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681c      	ldr	r4, [r3, #0]
 8004b64:	f001 f9b2 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8004b68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4620      	mov	r0, r4
 8004b72:	f001 fa2f 	bl	8005fd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f004 fc77 	bl	800946a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f002 fbaf 	bl	80072f4 <USB_ReadInterrupts>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d10a      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f004 fc54 	bl	800944e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f002 0208 	and.w	r2, r2, #8
 8004bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 fb9a 	bl	80072f4 <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d123      	bne.n	8004c12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bda:	e014      	b.n	8004c06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 faf2 	bl	80051e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	3301      	adds	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	791b      	ldrb	r3, [r3, #4]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d3e4      	bcc.n	8004bdc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 fb6c 	bl	80072f4 <USB_ReadInterrupts>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c26:	d13c      	bne.n	8004ca2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c28:	2301      	movs	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2c:	e02b      	b.n	8004c86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3318      	adds	r3, #24
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d115      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da12      	bge.n	8004c80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3317      	adds	r3, #23
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fab2 	bl	80051e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	3301      	adds	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	791b      	ldrb	r3, [r3, #4]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d3cd      	bcc.n	8004c2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f002 fb24 	bl	80072f4 <USB_ReadInterrupts>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb6:	d156      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cb8:	2301      	movs	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbc:	e045      	b.n	8004d4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d12e      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ce6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da2b      	bge.n	8004d44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004cf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d121      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d40:	6053      	str	r3, [r2, #4]
            break;
 8004d42:	e008      	b.n	8004d56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	791b      	ldrb	r3, [r3, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d3b3      	bcc.n	8004cbe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f002 fac2 	bl	80072f4 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7a:	d10a      	bne.n	8004d92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f004 fbeb 	bl	8009558 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 faac 	bl	80072f4 <USB_ReadInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d115      	bne.n	8004dd2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f004 fbdb 	bl	8009574 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	e000      	b.n	8004dd2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004dd0:	bf00      	nop
    }
  }
}
 8004dd2:	3734      	adds	r7, #52	@ 0x34
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}

08004dd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_SetAddress+0x1a>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e012      	b.n	8004e18 <HAL_PCD_SetAddress+0x40>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 fa0b 	bl	8007224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	70fb      	strb	r3, [r7, #3]
 8004e32:	460b      	mov	r3, r1
 8004e34:	803b      	strh	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da0f      	bge.n	8004e66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	3310      	adds	r3, #16
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	705a      	strb	r2, [r3, #1]
 8004e64:	e00f      	b.n	8004e86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004e92:	883b      	ldrh	r3, [r7, #0]
 8004e94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	78ba      	ldrb	r2, [r7, #2]
 8004ea0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004eb4:	78bb      	ldrb	r3, [r7, #2]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d102      	bne.n	8004ec0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_PCD_EP_Open+0xae>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e00e      	b.n	8004eec <HAL_PCD_EP_Open+0xcc>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fb8b 	bl	80065f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004eea:	7afb      	ldrb	r3, [r7, #11]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da0f      	bge.n	8004f28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	3310      	adds	r3, #16
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	705a      	strb	r2, [r3, #1]
 8004f26:	e00f      	b.n	8004f48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3304      	adds	r3, #4
 8004f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_PCD_EP_Close+0x6e>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e00e      	b.n	8004f80 <HAL_PCD_EP_Close+0x8c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fbc9 	bl	8006708 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	460b      	mov	r3, r1
 8004f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	f003 020f 	and.w	r2, r3, #15
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	799b      	ldrb	r3, [r3, #6]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d102      	bne.n	8004fe4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	799b      	ldrb	r3, [r3, #6]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	f001 fc66 	bl	80068c0 <USB_EPStartXfer>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	460b      	mov	r3, r1
 800500c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3310      	adds	r3, #16
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	3304      	adds	r3, #4
 8005024:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2201      	movs	r2, #1
 800503c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	b2da      	uxtb	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	799b      	ldrb	r3, [r3, #6]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	799b      	ldrb	r3, [r3, #6]
 8005060:	461a      	mov	r2, r3
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	f001 fc2c 	bl	80068c0 <USB_EPStartXfer>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	7912      	ldrb	r2, [r2, #4]
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e04f      	b.n	8005130 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005094:	2b00      	cmp	r3, #0
 8005096:	da0f      	bge.n	80050b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	3310      	adds	r3, #16
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	3304      	adds	r3, #4
 80050ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	705a      	strb	r2, [r3, #1]
 80050b6:	e00d      	b.n	80050d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_PCD_EP_SetStall+0x82>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e01d      	b.n	8005130 <HAL_PCD_EP_SetStall+0xbe>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	4618      	mov	r0, r3
 8005104:	f001 ffba 	bl	800707c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7999      	ldrb	r1, [r3, #6]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005120:	461a      	mov	r2, r3
 8005122:	f002 f9ab 	bl	800747c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	7912      	ldrb	r2, [r2, #4]
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e042      	b.n	80051dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	da0f      	bge.n	800517e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3310      	adds	r3, #16
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	3304      	adds	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	705a      	strb	r2, [r3, #1]
 800517c:	e00f      	b.n	800519e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	f003 020f 	and.w	r2, r3, #15
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	3304      	adds	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_PCD_EP_ClrStall+0x86>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e00e      	b.n	80051dc <HAL_PCD_EP_ClrStall+0xa4>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 ffc3 	bl	8007158 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da0c      	bge.n	8005212 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f003 020f 	and.w	r2, r3, #15
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	3310      	adds	r3, #16
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4413      	add	r3, r2
 800520c:	3304      	adds	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e00c      	b.n	800522c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	4413      	add	r3, r2
 8005228:	3304      	adds	r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	4618      	mov	r0, r3
 8005234:	f001 fde2 	bl	8006dfc <USB_EPStopXfer>
 8005238:	4603      	mov	r3, r0
 800523a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800523c:	7afb      	ldrb	r3, [r7, #11]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b08a      	sub	sp, #40	@ 0x28
 800524a:	af02      	add	r7, sp, #8
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	3310      	adds	r3, #16
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d901      	bls.n	800527e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e06b      	b.n	8005356 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	429a      	cmp	r2, r3
 8005292:	d902      	bls.n	800529a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3303      	adds	r3, #3
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052a2:	e02a      	b.n	80052fa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d902      	bls.n	80052c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3303      	adds	r3, #3
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68d9      	ldr	r1, [r3, #12]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4603      	mov	r3, r0
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f001 fe37 	bl	8006f50 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	441a      	add	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	429a      	cmp	r2, r3
 800530e:	d809      	bhi.n	8005324 <PCD_WriteEmptyTxFifo+0xde>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005318:	429a      	cmp	r2, r3
 800531a:	d203      	bcs.n	8005324 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1bf      	bne.n	80052a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d811      	bhi.n	8005354 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	43db      	mvns	r3, r3
 800534a:	6939      	ldr	r1, [r7, #16]
 800534c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005350:	4013      	ands	r3, r2
 8005352:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	333c      	adds	r3, #60	@ 0x3c
 8005378:	3304      	adds	r3, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	799b      	ldrb	r3, [r3, #6]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d17b      	bne.n	800548e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4a61      	ldr	r2, [pc, #388]	@ (8005528 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f240 80b9 	bls.w	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80b3 	beq.w	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c2:	461a      	mov	r2, r3
 80053c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053c8:	6093      	str	r3, [r2, #8]
 80053ca:	e0a7      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	2320      	movs	r3, #32
 80053e6:	6093      	str	r3, [r2, #8]
 80053e8:	e098      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 8093 	bne.w	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005528 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d90f      	bls.n	800541e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	e07e      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	0159      	lsls	r1, r3, #5
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	440b      	add	r3, r1
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d114      	bne.n	8005480 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005468:	461a      	mov	r2, r3
 800546a:	2101      	movs	r1, #1
 800546c:	f002 f806 	bl	800747c <USB_EP0_OutStart>
 8005470:	e006      	b.n	8005480 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	441a      	add	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f003 ffac 	bl	80093e4 <HAL_PCD_DataOutStageCallback>
 800548c:	e046      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d124      	bne.n	80054e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ac:	461a      	mov	r2, r3
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	6093      	str	r3, [r2, #8]
 80054b4:	e032      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	2320      	movs	r3, #32
 80054d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f003 ff83 	bl	80093e4 <HAL_PCD_DataOutStageCallback>
 80054de:	e01d      	b.n	800551c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d114      	bne.n	8005510 <PCD_EP_OutXfrComplete_int+0x1b0>
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005508:	461a      	mov	r2, r3
 800550a:	2100      	movs	r1, #0
 800550c:	f001 ffb6 	bl	800747c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f003 ff64 	bl	80093e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	4f54300a 	.word	0x4f54300a
 800552c:	4f54310a 	.word	0x4f54310a

08005530 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	333c      	adds	r3, #60	@ 0x3c
 8005548:	3304      	adds	r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d90e      	bls.n	8005584 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557c:	461a      	mov	r2, r3
 800557e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005582:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f003 ff1b 	bl	80093c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d90c      	bls.n	80055ac <PCD_EP_OutSetupPacket_int+0x7c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	799b      	ldrb	r3, [r3, #6]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055a4:	461a      	mov	r2, r3
 80055a6:	2101      	movs	r1, #1
 80055a8:	f001 ff68 	bl	800747c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	4f54300a 	.word	0x4f54300a

080055bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
 80055c8:	4613      	mov	r3, r2
 80055ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055da:	883b      	ldrh	r3, [r7, #0]
 80055dc:	0419      	lsls	r1, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80055e8:	e028      	b.n	800563c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	4413      	add	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
 80055fc:	e00d      	b.n	800561a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	3340      	adds	r3, #64	@ 0x40
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	3301      	adds	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	3b01      	subs	r3, #1
 8005620:	429a      	cmp	r2, r3
 8005622:	d3ec      	bcc.n	80055fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005624:	883b      	ldrh	r3, [r7, #0]
 8005626:	0418      	lsls	r0, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	3b01      	subs	r3, #1
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4302      	orrs	r2, r0
 8005634:	3340      	adds	r3, #64	@ 0x40
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e267      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d075      	beq.n	800578e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d00c      	beq.n	80056c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ae:	4b85      	ldr	r3, [pc, #532]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d112      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ba:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b7e      	ldr	r3, [pc, #504]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <HAL_RCC_OscConfig+0x108>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d157      	bne.n	800578c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e242      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x74>
 80056ea:	4b76      	ldr	r3, [pc, #472]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a75      	ldr	r2, [pc, #468]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x98>
 8005702:	4b70      	ldr	r3, [pc, #448]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6f      	ldr	r2, [pc, #444]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b6d      	ldr	r3, [pc, #436]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6c      	ldr	r2, [pc, #432]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 800571c:	4b69      	ldr	r3, [pc, #420]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a68      	ldr	r2, [pc, #416]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b66      	ldr	r3, [pc, #408]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a65      	ldr	r2, [pc, #404]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fb fd4a 	bl	80011d4 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fb fd46 	bl	80011d4 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	@ 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e207      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b5b      	ldr	r3, [pc, #364]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xc0>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fb fd36 	bl	80011d4 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7fb fd32 	bl	80011d4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1f3      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	4b51      	ldr	r3, [pc, #324]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0xe8>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d063      	beq.n	8005862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800579a:	4b4a      	ldr	r3, [pc, #296]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d11c      	bne.n	80057ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b2:	4b44      	ldr	r3, [pc, #272]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d116      	bne.n	80057ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_RCC_OscConfig+0x152>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e1c7      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4937      	ldr	r1, [pc, #220]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	e03a      	b.n	8005862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f4:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <HAL_RCC_OscConfig+0x244>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fb fceb 	bl	80011d4 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005802:	f7fb fce7 	bl	80011d4 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e1a8      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005814:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005820:	4b28      	ldr	r3, [pc, #160]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4925      	ldr	r1, [pc, #148]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	e015      	b.n	8005862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005836:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_RCC_OscConfig+0x244>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fb fcca 	bl	80011d4 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7fb fcc6 	bl	80011d4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e187      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005856:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d036      	beq.n	80058dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005876:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <HAL_RCC_OscConfig+0x248>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7fb fcaa 	bl	80011d4 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005884:	f7fb fca6 	bl	80011d4 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e167      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_OscConfig+0x240>)
 8005898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x200>
 80058a2:	e01b      	b.n	80058dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <HAL_RCC_OscConfig+0x248>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058aa:	f7fb fc93 	bl	80011d4 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	e00e      	b.n	80058d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b2:	f7fb fc8f 	bl	80011d4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d907      	bls.n	80058d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e150      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470000 	.word	0x42470000
 80058cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	4b88      	ldr	r3, [pc, #544]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ea      	bne.n	80058b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8097 	beq.w	8005a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ee:	4b81      	ldr	r3, [pc, #516]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10f      	bne.n	800591a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	4b7d      	ldr	r3, [pc, #500]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005908:	6413      	str	r3, [r2, #64]	@ 0x40
 800590a:	4b7a      	ldr	r3, [pc, #488]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b77      	ldr	r3, [pc, #476]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d118      	bne.n	8005958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005926:	4b74      	ldr	r3, [pc, #464]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a73      	ldr	r2, [pc, #460]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005932:	f7fb fc4f 	bl	80011d4 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7fb fc4b 	bl	80011d4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e10c      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594c:	4b6a      	ldr	r3, [pc, #424]	@ (8005af8 <HAL_RCC_OscConfig+0x474>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x2ea>
 8005960:	4b64      	ldr	r3, [pc, #400]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	4a63      	ldr	r2, [pc, #396]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6713      	str	r3, [r2, #112]	@ 0x70
 800596c:	e01c      	b.n	80059a8 <HAL_RCC_OscConfig+0x324>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b05      	cmp	r3, #5
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x30c>
 8005976:	4b5f      	ldr	r3, [pc, #380]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	4a5e      	ldr	r2, [pc, #376]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	6713      	str	r3, [r2, #112]	@ 0x70
 8005982:	4b5c      	ldr	r3, [pc, #368]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	4a5b      	ldr	r2, [pc, #364]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6713      	str	r3, [r2, #112]	@ 0x70
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0x324>
 8005990:	4b58      	ldr	r3, [pc, #352]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	4a57      	ldr	r2, [pc, #348]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	@ 0x70
 800599c:	4b55      	ldr	r3, [pc, #340]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a0:	4a54      	ldr	r2, [pc, #336]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059a2:	f023 0304 	bic.w	r3, r3, #4
 80059a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7fb fc10 	bl	80011d4 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fb fc0c 	bl	80011d4 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0cb      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ee      	beq.n	80059b8 <HAL_RCC_OscConfig+0x334>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059dc:	f7fb fbfa 	bl	80011d4 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fb fbf6 	bl	80011d4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0b5      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fa:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ee      	bne.n	80059e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0c:	4b39      	ldr	r3, [pc, #228]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a1 	beq.w	8005b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d05c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d141      	bne.n	8005aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a36:	4b31      	ldr	r3, [pc, #196]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fb fbca 	bl	80011d4 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fb fbc6 	bl	80011d4 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e087      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a56:	4b27      	ldr	r3, [pc, #156]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	019b      	lsls	r3, r3, #6
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	491b      	ldr	r1, [pc, #108]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7fb fb9f 	bl	80011d4 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9a:	f7fb fb9b 	bl	80011d4 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e05c      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aac:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x416>
 8005ab8:	e054      	b.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b10      	ldr	r3, [pc, #64]	@ (8005afc <HAL_RCC_OscConfig+0x478>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac0:	f7fb fb88 	bl	80011d4 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7fb fb84 	bl	80011d4 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e045      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <HAL_RCC_OscConfig+0x470>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x444>
 8005ae6:	e03d      	b.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e038      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40007000 	.word	0x40007000
 8005afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <HAL_RCC_OscConfig+0x4ec>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d121      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d11a      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b30:	4013      	ands	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d111      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800

08005b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0cc      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b88:	4b68      	ldr	r3, [pc, #416]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d90c      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	4b65      	ldr	r3, [pc, #404]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b63      	ldr	r3, [pc, #396]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0b8      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a58      	ldr	r2, [pc, #352]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be0:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a52      	ldr	r2, [pc, #328]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bec:	4b50      	ldr	r3, [pc, #320]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	494d      	ldr	r1, [pc, #308]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d044      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c12:	4b47      	ldr	r3, [pc, #284]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d119      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e07f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d003      	beq.n	8005c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d107      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c32:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e06f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c42:	4b3b      	ldr	r3, [pc, #236]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e067      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c52:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 0203 	bic.w	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	4934      	ldr	r1, [pc, #208]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c64:	f7fb fab6 	bl	80011d4 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	e00a      	b.n	8005c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6c:	f7fb fab2 	bl	80011d4 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e04f      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	4b2b      	ldr	r3, [pc, #172]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 020c 	and.w	r2, r3, #12
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1eb      	bne.n	8005c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d20c      	bcs.n	8005cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e032      	b.n	8005d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4916      	ldr	r1, [pc, #88]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	490e      	ldr	r1, [pc, #56]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cfa:	f000 f821 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	490a      	ldr	r1, [pc, #40]	@ (8005d34 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0c:	5ccb      	ldrb	r3, [r1, r3]
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	4a09      	ldr	r2, [pc, #36]	@ (8005d38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d16:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <HAL_RCC_ClockConfig+0x1c8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fb fa16 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40023c00 	.word	0x40023c00
 8005d30:	40023800 	.word	0x40023800
 8005d34:	08009b70 	.word	0x08009b70
 8005d38:	20000000 	.word	0x20000000
 8005d3c:	20000004 	.word	0x20000004

08005d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d44:	b090      	sub	sp, #64	@ 0x40
 8005d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d58:	4b59      	ldr	r3, [pc, #356]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d00d      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x40>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	f200 80a1 	bhi.w	8005eac <HAL_RCC_GetSysClockFreq+0x16c>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x34>
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d72:	e09b      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d74:	4b53      	ldr	r3, [pc, #332]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d78:	e09b      	b.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d7a:	4b53      	ldr	r3, [pc, #332]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d7e:	e098      	b.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d80:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d028      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d96:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005da8:	2100      	movs	r1, #0
 8005daa:	4b47      	ldr	r3, [pc, #284]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dac:	fb03 f201 	mul.w	r2, r3, r1
 8005db0:	2300      	movs	r3, #0
 8005db2:	fb00 f303 	mul.w	r3, r0, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	4a43      	ldr	r2, [pc, #268]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005dba:	fba0 1202 	umull	r1, r2, r0, r2
 8005dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc6:	4413      	add	r3, r2
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dcc:	2200      	movs	r2, #0
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	61fa      	str	r2, [r7, #28]
 8005dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005dda:	f7fa f9fd 	bl	80001d8 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4613      	mov	r3, r2
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de6:	e053      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de8:	4b35      	ldr	r3, [pc, #212]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	2200      	movs	r2, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	617a      	str	r2, [r7, #20]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005dfa:	f04f 0b00 	mov.w	fp, #0
 8005dfe:	4652      	mov	r2, sl
 8005e00:	465b      	mov	r3, fp
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	0159      	lsls	r1, r3, #5
 8005e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e10:	0150      	lsls	r0, r2, #5
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	ebb2 080a 	subs.w	r8, r2, sl
 8005e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e32:	ebb2 0408 	subs.w	r4, r2, r8
 8005e36:	eb63 0509 	sbc.w	r5, r3, r9
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	00eb      	lsls	r3, r5, #3
 8005e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e48:	00e2      	lsls	r2, r4, #3
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	eb14 030a 	adds.w	r3, r4, sl
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	eb45 030b 	adc.w	r3, r5, fp
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e66:	4629      	mov	r1, r5
 8005e68:	028b      	lsls	r3, r1, #10
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e70:	4621      	mov	r1, r4
 8005e72:	028a      	lsls	r2, r1, #10
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	60fa      	str	r2, [r7, #12]
 8005e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e84:	f7fa f9a8 	bl	80001d8 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eac:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3740      	adds	r7, #64	@ 0x40
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	017d7840 	.word	0x017d7840

08005ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000000 	.word	0x20000000

08005ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ee8:	f7ff fff0 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	0a9b      	lsrs	r3, r3, #10
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	4903      	ldr	r1, [pc, #12]	@ (8005f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005efa:	5ccb      	ldrb	r3, [r1, r3]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40023800 	.word	0x40023800
 8005f08:	08009b80 	.word	0x08009b80

08005f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	f107 001c 	add.w	r0, r7, #28
 8005f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d123      	bne.n	8005f6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fae8 	bl	8007538 <USB_CoreReset>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e01b      	b.n	8005fa6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fadc 	bl	8007538 <USB_CoreReset>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f98:	e005      	b.n	8005fa6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fa6:	7fbb      	ldrb	r3, [r7, #30]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10b      	bne.n	8005fc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f043 0206 	orr.w	r2, r3, #6
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f043 0220 	orr.w	r2, r3, #32
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fd0:	b004      	add	sp, #16
 8005fd2:	4770      	bx	lr

08005fd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d165      	bne.n	80060b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a41      	ldr	r2, [pc, #260]	@ (80060f0 <USB_SetTurnaroundTime+0x11c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d906      	bls.n	8005ffe <USB_SetTurnaroundTime+0x2a>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a40      	ldr	r2, [pc, #256]	@ (80060f4 <USB_SetTurnaroundTime+0x120>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ff8:	230f      	movs	r3, #15
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e062      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a3c      	ldr	r2, [pc, #240]	@ (80060f4 <USB_SetTurnaroundTime+0x120>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0x40>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a3b      	ldr	r2, [pc, #236]	@ (80060f8 <USB_SetTurnaroundTime+0x124>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d202      	bcs.n	8006014 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800600e:	230e      	movs	r3, #14
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e057      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a38      	ldr	r2, [pc, #224]	@ (80060f8 <USB_SetTurnaroundTime+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d306      	bcc.n	800602a <USB_SetTurnaroundTime+0x56>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a37      	ldr	r2, [pc, #220]	@ (80060fc <USB_SetTurnaroundTime+0x128>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d202      	bcs.n	800602a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006024:	230d      	movs	r3, #13
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e04c      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <USB_SetTurnaroundTime+0x128>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d306      	bcc.n	8006040 <USB_SetTurnaroundTime+0x6c>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a32      	ldr	r2, [pc, #200]	@ (8006100 <USB_SetTurnaroundTime+0x12c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d802      	bhi.n	8006040 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800603a:	230c      	movs	r3, #12
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e041      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a2f      	ldr	r2, [pc, #188]	@ (8006100 <USB_SetTurnaroundTime+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d906      	bls.n	8006056 <USB_SetTurnaroundTime+0x82>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <USB_SetTurnaroundTime+0x130>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d802      	bhi.n	8006056 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006050:	230b      	movs	r3, #11
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e036      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4a2a      	ldr	r2, [pc, #168]	@ (8006104 <USB_SetTurnaroundTime+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d906      	bls.n	800606c <USB_SetTurnaroundTime+0x98>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a29      	ldr	r2, [pc, #164]	@ (8006108 <USB_SetTurnaroundTime+0x134>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d802      	bhi.n	800606c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006066:	230a      	movs	r3, #10
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e02b      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <USB_SetTurnaroundTime+0x134>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d906      	bls.n	8006082 <USB_SetTurnaroundTime+0xae>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a25      	ldr	r2, [pc, #148]	@ (800610c <USB_SetTurnaroundTime+0x138>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d202      	bcs.n	8006082 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800607c:	2309      	movs	r3, #9
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e020      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4a21      	ldr	r2, [pc, #132]	@ (800610c <USB_SetTurnaroundTime+0x138>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d306      	bcc.n	8006098 <USB_SetTurnaroundTime+0xc4>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a20      	ldr	r2, [pc, #128]	@ (8006110 <USB_SetTurnaroundTime+0x13c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d802      	bhi.n	8006098 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006092:	2308      	movs	r3, #8
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e015      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <USB_SetTurnaroundTime+0x13c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d906      	bls.n	80060ae <USB_SetTurnaroundTime+0xda>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006114 <USB_SetTurnaroundTime+0x140>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d202      	bcs.n	80060ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060a8:	2307      	movs	r3, #7
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e00a      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060ae:	2306      	movs	r3, #6
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e007      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060ba:	2309      	movs	r3, #9
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e001      	b.n	80060c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060c0:	2309      	movs	r3, #9
 80060c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	029b      	lsls	r3, r3, #10
 80060d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	00d8acbf 	.word	0x00d8acbf
 80060f4:	00e4e1c0 	.word	0x00e4e1c0
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	01067380 	.word	0x01067380
 8006100:	011a499f 	.word	0x011a499f
 8006104:	01312cff 	.word	0x01312cff
 8006108:	014ca43f 	.word	0x014ca43f
 800610c:	016e3600 	.word	0x016e3600
 8006110:	01a6ab1f 	.word	0x01a6ab1f
 8006114:	01e84800 	.word	0x01e84800

08006118 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d115      	bne.n	80061aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800618a:	200a      	movs	r0, #10
 800618c:	f7fb f82e 	bl	80011ec <HAL_Delay>
      ms += 10U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	330a      	adds	r3, #10
 8006194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f93f 	bl	800741a <USB_GetMode>
 800619c:	4603      	mov	r3, r0
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d01e      	beq.n	80061e0 <USB_SetCurrentMode+0x84>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80061a6:	d9f0      	bls.n	800618a <USB_SetCurrentMode+0x2e>
 80061a8:	e01a      	b.n	80061e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d115      	bne.n	80061dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061bc:	200a      	movs	r0, #10
 80061be:	f7fb f815 	bl	80011ec <HAL_Delay>
      ms += 10U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	330a      	adds	r3, #10
 80061c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f926 	bl	800741a <USB_GetMode>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <USB_SetCurrentMode+0x84>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061d8:	d9f0      	bls.n	80061bc <USB_SetCurrentMode+0x60>
 80061da:	e001      	b.n	80061e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e005      	b.n	80061ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80061e4:	d101      	bne.n	80061ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f4:	b084      	sub	sp, #16
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e009      	b.n	8006228 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3340      	adds	r3, #64	@ 0x40
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	2200      	movs	r2, #0
 8006220:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b0e      	cmp	r3, #14
 800622c:	d9f2      	bls.n	8006214 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800622e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11c      	bne.n	8006270 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006266:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	639a      	str	r2, [r3, #56]	@ 0x38
 800626e:	e00b      	b.n	8006288 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006294:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006298:	2b01      	cmp	r3, #1
 800629a:	d10d      	bne.n	80062b8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800629c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f968 	bl	800657c <USB_SetDevSpeed>
 80062ac:	e008      	b.n	80062c0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062ae:	2101      	movs	r1, #1
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f963 	bl	800657c <USB_SetDevSpeed>
 80062b6:	e003      	b.n	80062c0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062b8:	2103      	movs	r1, #3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f95e 	bl	800657c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062c0:	2110      	movs	r1, #16
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8fa 	bl	80064bc <USB_FlushTxFifo>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f924 	bl	8006520 <USB_FlushRxFifo>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	461a      	mov	r2, r3
 80062ea:	2300      	movs	r3, #0
 80062ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	e043      	b.n	8006394 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006322:	d118      	bne.n	8006356 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e013      	b.n	8006368 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e008      	b.n	8006368 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006386:	461a      	mov	r2, r3
 8006388:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800638c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006398:	461a      	mov	r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4293      	cmp	r3, r2
 800639e:	d3b5      	bcc.n	800630c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e043      	b.n	800642e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063bc:	d118      	bne.n	80063f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e013      	b.n	8006402 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e008      	b.n	8006402 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3301      	adds	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006432:	461a      	mov	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4293      	cmp	r3, r2
 8006438:	d3b5      	bcc.n	80063a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800645a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800645c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <USB_DevInit+0x2c4>)
 8006476:	4313      	orrs	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800647c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0208 	orr.w	r2, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006490:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	f043 0304 	orr.w	r3, r3, #4
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b4:	b004      	add	sp, #16
 80064b6:	4770      	bx	lr
 80064b8:	803c3800 	.word	0x803c3800

080064bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d6:	d901      	bls.n	80064dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e01b      	b.n	8006514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	daf2      	bge.n	80064ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	019b      	lsls	r3, r3, #6
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006500:	d901      	bls.n	8006506 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e006      	b.n	8006514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d0f0      	beq.n	80064f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006538:	d901      	bls.n	800653e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e018      	b.n	8006570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	daf2      	bge.n	800652c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2210      	movs	r2, #16
 800654e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800655c:	d901      	bls.n	8006562 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e006      	b.n	8006570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b10      	cmp	r3, #16
 800656c:	d0f0      	beq.n	8006550 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b087      	sub	sp, #28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0306 	and.w	r3, r3, #6
 80065c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
 80065d2:	e00a      	b.n	80065ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d002      	beq.n	80065e0 <USB_GetDevSpeed+0x32>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d102      	bne.n	80065e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065e0:	2302      	movs	r3, #2
 80065e2:	75fb      	strb	r3, [r7, #23]
 80065e4:	e001      	b.n	80065ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065e6:	230f      	movs	r3, #15
 80065e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d13a      	bne.n	800668a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	2101      	movs	r1, #1
 8006626:	fa01 f303 	lsl.w	r3, r1, r3
 800662a:	b29b      	uxth	r3, r3
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006632:	4313      	orrs	r3, r2
 8006634:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d155      	bne.n	80066f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006668:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	059b      	lsls	r3, r3, #22
 800666e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006670:	4313      	orrs	r3, r2
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	e036      	b.n	80066f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11a      	bne.n	80066f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	791b      	ldrb	r3, [r3, #4]
 80066dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066de:	430b      	orrs	r3, r1
 80066e0:	4313      	orrs	r3, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d161      	bne.n	80067e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800673a:	d11f      	bne.n	800677c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	440a      	add	r2, r1
 8006752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800675a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	440a      	add	r2, r1
 8006772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006776:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800677a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	43db      	mvns	r3, r3
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800679c:	4013      	ands	r3, r2
 800679e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	2101      	movs	r1, #1
 80067b2:	fa01 f303 	lsl.w	r3, r1, r3
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067c0:	4013      	ands	r3, r2
 80067c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	0159      	lsls	r1, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	440b      	add	r3, r1
 80067da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067de:	4619      	mov	r1, r3
 80067e0:	4b35      	ldr	r3, [pc, #212]	@ (80068b8 <USB_DeactivateEndpoint+0x1b0>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]
 80067e6:	e060      	b.n	80068aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067fe:	d11f      	bne.n	8006840 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800681a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800681e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800683a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800683e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	2101      	movs	r1, #1
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	43db      	mvns	r3, r3
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006860:	4013      	ands	r3, r2
 8006862:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	2101      	movs	r1, #1
 8006876:	fa01 f303 	lsl.w	r3, r1, r3
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	43db      	mvns	r3, r3
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006884:	4013      	ands	r3, r2
 8006886:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	0159      	lsls	r1, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	440b      	add	r3, r1
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	4619      	mov	r1, r3
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <USB_DeactivateEndpoint+0x1b4>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	ec337800 	.word	0xec337800
 80068bc:	eff37800 	.word	0xeff37800

080068c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	@ 0x28
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 817f 	bne.w	8006be0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d132      	bne.n	8006950 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006904:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006908:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800690c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800692c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006948:	0cdb      	lsrs	r3, r3, #19
 800694a:	04db      	lsls	r3, r3, #19
 800694c:	6113      	str	r3, [r2, #16]
 800694e:	e097      	b.n	8006a80 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696a:	0cdb      	lsrs	r3, r3, #19
 800696c:	04db      	lsls	r3, r3, #19
 800696e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800698e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006992:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d11a      	bne.n	80069d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d903      	bls.n	80069ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069cc:	6113      	str	r3, [r2, #16]
 80069ce:	e044      	b.n	8006a5a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	8afb      	ldrh	r3, [r7, #22]
 80069f6:	04d9      	lsls	r1, r3, #19
 80069f8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c8c <USB_EPStartXfer+0x3cc>)
 80069fa:	400b      	ands	r3, r1
 80069fc:	69b9      	ldr	r1, [r7, #24]
 80069fe:	0148      	lsls	r0, r1, #5
 8006a00:	69f9      	ldr	r1, [r7, #28]
 8006a02:	4401      	add	r1, r0
 8006a04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	791b      	ldrb	r3, [r3, #4]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d122      	bne.n	8006a5a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	8afb      	ldrh	r3, [r7, #22]
 8006a44:	075b      	lsls	r3, r3, #29
 8006a46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006a4a:	69b9      	ldr	r1, [r7, #24]
 8006a4c:	0148      	lsls	r0, r1, #5
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	4401      	add	r1, r0
 8006a52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a56:	4313      	orrs	r3, r2
 8006a58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	0148      	lsls	r0, r1, #5
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	4401      	add	r1, r0
 8006a78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d14b      	bne.n	8006b1e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d128      	bne.n	8006afc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d110      	bne.n	8006adc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e00f      	b.n	8006afc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006afa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e166      	b.n	8006dec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d015      	beq.n	8006b72 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 814e 	beq.w	8006dec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b70:	e13c      	b.n	8006dec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d110      	bne.n	8006ba4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e00f      	b.n	8006bc4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68d9      	ldr	r1, [r3, #12]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	b298      	uxth	r0, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f9b9 	bl	8006f50 <USB_WritePacket>
 8006bde:	e105      	b.n	8006dec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfa:	0cdb      	lsrs	r3, r3, #19
 8006bfc:	04db      	lsls	r3, r3, #19
 8006bfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c22:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d132      	bne.n	8006c90 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c58:	69b9      	ldr	r1, [r7, #24]
 8006c5a:	0148      	lsls	r0, r1, #5
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	4401      	add	r1, r0
 8006c60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c86:	6113      	str	r3, [r2, #16]
 8006c88:	e062      	b.n	8006d50 <USB_EPStartXfer+0x490>
 8006c8a:	bf00      	nop
 8006c8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d123      	bne.n	8006ce0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	0148      	lsls	r0, r1, #5
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	4401      	add	r1, r0
 8006cb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cdc:	6113      	str	r3, [r2, #16]
 8006cde:	e037      	b.n	8006d50 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	1e5a      	subs	r2, r3, #1
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	8afa      	ldrh	r2, [r7, #22]
 8006cfc:	fb03 f202 	mul.w	r2, r3, r2
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	8afb      	ldrh	r3, [r7, #22]
 8006d14:	04d9      	lsls	r1, r3, #19
 8006d16:	4b38      	ldr	r3, [pc, #224]	@ (8006df8 <USB_EPStartXfer+0x538>)
 8006d18:	400b      	ands	r3, r1
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	0148      	lsls	r0, r1, #5
 8006d1e:	69f9      	ldr	r1, [r7, #28]
 8006d20:	4401      	add	r1, r0
 8006d22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d26:	4313      	orrs	r3, r2
 8006d28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	0148      	lsls	r0, r1, #5
 8006d44:	69f9      	ldr	r1, [r7, #28]
 8006d46:	4401      	add	r1, r0
 8006d48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10d      	bne.n	8006d72 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68d9      	ldr	r1, [r3, #12]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6e:	460a      	mov	r2, r1
 8006d70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d128      	bne.n	8006dcc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d110      	bne.n	8006dac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e00f      	b.n	8006dcc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	1ff80000 	.word	0x1ff80000

08006dfc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d14a      	bne.n	8006eb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e32:	f040 8086 	bne.w	8006f42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	7812      	ldrb	r2, [r2, #0]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d902      	bls.n	8006e94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
          break;
 8006e92:	e056      	b.n	8006f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eac:	d0e7      	beq.n	8006e7e <USB_EPStopXfer+0x82>
 8006eae:	e048      	b.n	8006f42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec8:	d13b      	bne.n	8006f42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d902      	bls.n	8006f28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
          break;
 8006f26:	e00c      	b.n	8006f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f40:	d0e7      	beq.n	8006f12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	@ 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	460b      	mov	r3, r1
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d123      	bne.n	8006fbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f76:	88bb      	ldrh	r3, [r7, #4]
 8006f78:	3303      	adds	r3, #3
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e018      	b.n	8006fb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	031a      	lsls	r2, r3, #12
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f90:	461a      	mov	r2, r3
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d3e2      	bcc.n	8006f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3724      	adds	r7, #36	@ 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b08b      	sub	sp, #44	@ 0x2c
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	089b      	lsrs	r3, r3, #2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	e014      	b.n	8007022 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	601a      	str	r2, [r3, #0]
    pDest++;
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	3301      	adds	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	3301      	adds	r3, #1
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	3301      	adds	r3, #1
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	3301      	adds	r3, #1
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	3301      	adds	r3, #1
 8007020:	623b      	str	r3, [r7, #32]
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3e6      	bcc.n	8006ff8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800702a:	8bfb      	ldrh	r3, [r7, #30]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703a:	461a      	mov	r2, r3
 800703c:	f107 0310 	add.w	r3, r7, #16
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	b2da      	uxtb	r2, r3
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	701a      	strb	r2, [r3, #0]
      i++;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	3301      	adds	r3, #1
 800705a:	623b      	str	r3, [r7, #32]
      pDest++;
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	3301      	adds	r3, #1
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007062:	8bfb      	ldrh	r3, [r7, #30]
 8007064:	3b01      	subs	r3, #1
 8007066:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007068:	8bfb      	ldrh	r3, [r7, #30]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1ea      	bne.n	8007044 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007070:	4618      	mov	r0, r3
 8007072:	372c      	adds	r7, #44	@ 0x2c
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	785b      	ldrb	r3, [r3, #1]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d12c      	bne.n	80070f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	db12      	blt.n	80070d0 <USB_EPSetStall+0x54>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e02b      	b.n	800714a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	db12      	blt.n	800712a <USB_EPSetStall+0xae>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007124:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007128:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007144:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007148:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d128      	bne.n	80071c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007192:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d003      	beq.n	80071a4 <USB_EPClearStall+0x4c>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d138      	bne.n	8007216 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	e027      	b.n	8007216 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	791b      	ldrb	r3, [r3, #4]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d003      	beq.n	80071f6 <USB_EPClearStall+0x9e>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	791b      	ldrb	r3, [r3, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d10f      	bne.n	8007216 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007214:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007242:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007246:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800725e:	4313      	orrs	r3, r2
 8007260:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800729e:	f023 0302 	bic.w	r3, r3, #2
 80072a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072cc:	f023 0303 	bic.w	r3, r3, #3
 80072d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4013      	ands	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	0c1b      	lsrs	r3, r3, #16
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	b29b      	uxth	r3, r3
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	4013      	ands	r3, r2
 80073ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073b0:	68bb      	ldr	r3, [r7, #8]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073be:	b480      	push	{r7}
 80073c0:	b087      	sub	sp, #28
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	fa22 f303 	lsr.w	r3, r2, r3
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4013      	ands	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800740c:	68bb      	ldr	r3, [r7, #8]
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007450:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800746c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	460b      	mov	r3, r1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	333c      	adds	r3, #60	@ 0x3c
 8007492:	3304      	adds	r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4a26      	ldr	r2, [pc, #152]	@ (8007534 <USB_EP0_OutStart+0xb8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d90a      	bls.n	80074b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b0:	d101      	bne.n	80074b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e037      	b.n	8007526 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e4:	f043 0318 	orr.w	r3, r3, #24
 80074e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80074fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10f      	bne.n	8007524 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800751e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	4f54300a 	.word	0x4f54300a

08007538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007550:	d901      	bls.n	8007556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e01b      	b.n	800758e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	daf2      	bge.n	8007544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f043 0201 	orr.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757a:	d901      	bls.n	8007580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e006      	b.n	800758e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d0f0      	beq.n	800756e <USB_CoreReset+0x36>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80075a8:	2010      	movs	r0, #16
 80075aa:	f002 f969 	bl	8009880 <USBD_static_malloc>
 80075ae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	32b0      	adds	r2, #176	@ 0xb0
 80075c0:	2100      	movs	r1, #0
 80075c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075c6:	2302      	movs	r3, #2
 80075c8:	e048      	b.n	800765c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	32b0      	adds	r2, #176	@ 0xb0
 80075d4:	68f9      	ldr	r1, [r7, #12]
 80075d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	32b0      	adds	r2, #176	@ 0xb0
 80075e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7c1b      	ldrb	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80075f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007664 <USBD_HID_Init+0xc8>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 020f 	and.w	r2, r3, #15
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	3326      	adds	r3, #38	@ 0x26
 800760c:	2207      	movs	r2, #7
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e00c      	b.n	800762c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007612:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <USBD_HID_Init+0xc8>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	3326      	adds	r3, #38	@ 0x26
 8007628:	220a      	movs	r2, #10
 800762a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800762c:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <USBD_HID_Init+0xc8>)
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	2304      	movs	r3, #4
 8007632:	2203      	movs	r2, #3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f002 f812 	bl	800965e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800763a:	4b0a      	ldr	r3, [pc, #40]	@ (8007664 <USBD_HID_Init+0xc8>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	3324      	adds	r3, #36	@ 0x24
 8007650:	2201      	movs	r2, #1
 8007652:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200000d9 	.word	0x200000d9

08007668 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007674:	4b1f      	ldr	r3, [pc, #124]	@ (80076f4 <USBD_HID_DeInit+0x8c>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f002 f815 	bl	80096aa <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007680:	4b1c      	ldr	r3, [pc, #112]	@ (80076f4 <USBD_HID_DeInit+0x8c>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3324      	adds	r3, #36	@ 0x24
 8007696:	2200      	movs	r2, #0
 8007698:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800769a:	4b16      	ldr	r3, [pc, #88]	@ (80076f4 <USBD_HID_DeInit+0x8c>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	f003 020f 	and.w	r2, r3, #15
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	3326      	adds	r3, #38	@ 0x26
 80076b0:	2200      	movs	r2, #0
 80076b2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	32b0      	adds	r2, #176	@ 0xb0
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d011      	beq.n	80076ea <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	@ 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 f8e1 	bl	800989c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	32b0      	adds	r2, #176	@ 0xb0
 80076e4:	2100      	movs	r1, #0
 80076e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200000d9 	.word	0x200000d9

080076f8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	32b0      	adds	r2, #176	@ 0xb0
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	617b      	str	r3, [r7, #20]
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	e118      	b.n	8007956 <USBD_HID_Setup+0x25e>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800772c:	2b00      	cmp	r3, #0
 800772e:	d076      	beq.n	800781e <USBD_HID_Setup+0x126>
 8007730:	2b20      	cmp	r3, #32
 8007732:	f040 8108 	bne.w	8007946 <USBD_HID_Setup+0x24e>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	3b01      	subs	r3, #1
 800773c:	2b0a      	cmp	r3, #10
 800773e:	d863      	bhi.n	8007808 <USBD_HID_Setup+0x110>
 8007740:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <USBD_HID_Setup+0x50>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	080077b3 	.word	0x080077b3
 800774c:	080077a3 	.word	0x080077a3
 8007750:	08007783 	.word	0x08007783
 8007754:	08007809 	.word	0x08007809
 8007758:	08007809 	.word	0x08007809
 800775c:	08007809 	.word	0x08007809
 8007760:	08007809 	.word	0x08007809
 8007764:	08007809 	.word	0x08007809
 8007768:	080077df 	.word	0x080077df
 800776c:	08007791 	.word	0x08007791
 8007770:	08007775 	.word	0x08007775
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	601a      	str	r2, [r3, #0]
          break;
 8007780:	e04c      	b.n	800781c <USBD_HID_Setup+0x124>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2201      	movs	r2, #1
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fc17 	bl	8008fbc <USBD_CtlSendData>
          break;
 800778e:	e045      	b.n	800781c <USBD_HID_Setup+0x124>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	885b      	ldrh	r3, [r3, #2]
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	b2db      	uxtb	r3, r3
 800779a:	461a      	mov	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	605a      	str	r2, [r3, #4]
          break;
 80077a0:	e03c      	b.n	800781c <USBD_HID_Setup+0x124>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	3304      	adds	r3, #4
 80077a6:	2201      	movs	r2, #1
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fc06 	bl	8008fbc <USBD_CtlSendData>
          break;
 80077b0:	e034      	b.n	800781c <USBD_HID_Setup+0x124>

        case USBD_HID_REQ_GET_REPORT:
			if (req->wValue >> 8 == 0x03) { // Report Type: Feature (0x03)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d12b      	bne.n	8007816 <USBD_HID_Setup+0x11e>
				uint8_t report_id = req->wValue & 0xFF;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	74bb      	strb	r3, [r7, #18]
				uint8_t *sendBuffer;
				sendBuffer[0] = resolution_multiplier;
 80077c4:	4b66      	ldr	r3, [pc, #408]	@ (8007960 <USBD_HID_Setup+0x268>)
 80077c6:	f993 3000 	ldrsb.w	r3, [r3]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	701a      	strb	r2, [r3, #0]
				USBD_CtlSendData(pdev, (uint8_t*) sendBuffer, 1);
 80077d0:	2201      	movs	r2, #1
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fbf1 	bl	8008fbc <USBD_CtlSendData>
				return USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e0bb      	b.n	8007956 <USBD_HID_Setup+0x25e>
			}

        	break;

		case USBD_HID_REQ_SET_REPORT:
			if (req->wValue >> 8 == 0x03) { // Report Type: Feature (0x03)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	885b      	ldrh	r3, [r3, #2]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d117      	bne.n	800781a <USBD_HID_Setup+0x122>
				uint8_t report_id = req->wValue & 0xFF;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	74fb      	strb	r3, [r7, #19]
				USBD_CtlPrepareRx(pdev, rx_buffer, 2);
 80077f0:	2202      	movs	r2, #2
 80077f2:	495c      	ldr	r1, [pc, #368]	@ (8007964 <USBD_HID_Setup+0x26c>)
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fc0d 	bl	8009014 <USBD_CtlPrepareRx>
				resolution_multiplier = rx_buffer[0];
 80077fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007964 <USBD_HID_Setup+0x26c>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b25a      	sxtb	r2, r3
 8007800:	4b57      	ldr	r3, [pc, #348]	@ (8007960 <USBD_HID_Setup+0x268>)
 8007802:	701a      	strb	r2, [r3, #0]
				return USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	e0a6      	b.n	8007956 <USBD_HID_Setup+0x25e>
			}

            break;

        default:
          USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fb59 	bl	8008ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	77fb      	strb	r3, [r7, #31]
          break;
 8007814:	e002      	b.n	800781c <USBD_HID_Setup+0x124>
        	break;
 8007816:	bf00      	nop
 8007818:	e09c      	b.n	8007954 <USBD_HID_Setup+0x25c>
            break;
 800781a:	bf00      	nop
      }
      break;
 800781c:	e09a      	b.n	8007954 <USBD_HID_Setup+0x25c>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b0b      	cmp	r3, #11
 8007824:	f200 8086 	bhi.w	8007934 <USBD_HID_Setup+0x23c>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <USBD_HID_Setup+0x138>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007861 	.word	0x08007861
 8007834:	08007943 	.word	0x08007943
 8007838:	08007935 	.word	0x08007935
 800783c:	08007935 	.word	0x08007935
 8007840:	08007935 	.word	0x08007935
 8007844:	08007935 	.word	0x08007935
 8007848:	0800788b 	.word	0x0800788b
 800784c:	08007935 	.word	0x08007935
 8007850:	08007935 	.word	0x08007935
 8007854:	08007935 	.word	0x08007935
 8007858:	080078e3 	.word	0x080078e3
 800785c:	0800790d 	.word	0x0800790d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b03      	cmp	r3, #3
 800786a:	d107      	bne.n	800787c <USBD_HID_Setup+0x184>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800786c:	f107 030a 	add.w	r3, r7, #10
 8007870:	2202      	movs	r2, #2
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fba1 	bl	8008fbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800787a:	e063      	b.n	8007944 <USBD_HID_Setup+0x24c>
            USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fb1f 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007884:	2303      	movs	r3, #3
 8007886:	77fb      	strb	r3, [r7, #31]
          break;
 8007888:	e05c      	b.n	8007944 <USBD_HID_Setup+0x24c>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b22      	cmp	r3, #34	@ 0x22
 8007894:	d108      	bne.n	80078a8 <USBD_HID_Setup+0x1b0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88db      	ldrh	r3, [r3, #6]
 800789a:	2b59      	cmp	r3, #89	@ 0x59
 800789c:	bf28      	it	cs
 800789e:	2359      	movcs	r3, #89	@ 0x59
 80078a0:	83bb      	strh	r3, [r7, #28]
            pbuf = HID_MOUSE_ReportDesc;
 80078a2:	4b31      	ldr	r3, [pc, #196]	@ (8007968 <USBD_HID_Setup+0x270>)
 80078a4:	61bb      	str	r3, [r7, #24]
 80078a6:	e015      	b.n	80078d4 <USBD_HID_Setup+0x1dc>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b21      	cmp	r3, #33	@ 0x21
 80078b2:	d108      	bne.n	80078c6 <USBD_HID_Setup+0x1ce>
          {
            pbuf = USBD_HID_Desc;
 80078b4:	4b2d      	ldr	r3, [pc, #180]	@ (800796c <USBD_HID_Setup+0x274>)
 80078b6:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	88db      	ldrh	r3, [r3, #6]
 80078bc:	2b09      	cmp	r3, #9
 80078be:	bf28      	it	cs
 80078c0:	2309      	movcs	r3, #9
 80078c2:	83bb      	strh	r3, [r7, #28]
 80078c4:	e006      	b.n	80078d4 <USBD_HID_Setup+0x1dc>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fafa 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	77fb      	strb	r3, [r7, #31]
            break;
 80078d2:	e037      	b.n	8007944 <USBD_HID_Setup+0x24c>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80078d4:	8bbb      	ldrh	r3, [r7, #28]
 80078d6:	461a      	mov	r2, r3
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fb6e 	bl	8008fbc <USBD_CtlSendData>
          break;
 80078e0:	e030      	b.n	8007944 <USBD_HID_Setup+0x24c>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d107      	bne.n	80078fe <USBD_HID_Setup+0x206>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	3308      	adds	r3, #8
 80078f2:	2201      	movs	r2, #1
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fb60 	bl	8008fbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078fc:	e022      	b.n	8007944 <USBD_HID_Setup+0x24c>
            USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fade 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	77fb      	strb	r3, [r7, #31]
          break;
 800790a:	e01b      	b.n	8007944 <USBD_HID_Setup+0x24c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b03      	cmp	r3, #3
 8007916:	d106      	bne.n	8007926 <USBD_HID_Setup+0x22e>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007924:	e00e      	b.n	8007944 <USBD_HID_Setup+0x24c>
            USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 faca 	bl	8008ec2 <USBD_CtlError>
            ret = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	77fb      	strb	r3, [r7, #31]
          break;
 8007932:	e007      	b.n	8007944 <USBD_HID_Setup+0x24c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fac3 	bl	8008ec2 <USBD_CtlError>
          ret = USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	77fb      	strb	r3, [r7, #31]
          break;
 8007940:	e000      	b.n	8007944 <USBD_HID_Setup+0x24c>
          break;
 8007942:	bf00      	nop
      }
      break;
 8007944:	e006      	b.n	8007954 <USBD_HID_Setup+0x25c>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 faba 	bl	8008ec2 <USBD_CtlError>
      ret = USBD_FAIL;
 800794e:	2303      	movs	r3, #3
 8007950:	77fb      	strb	r3, [r7, #31]
      break;
 8007952:	bf00      	nop
  }

  return (uint8_t)ret;
 8007954:	7ffb      	ldrb	r3, [r7, #31]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000009 	.word	0x20000009
 8007964:	20000238 	.word	0x20000238
 8007968:	20000080 	.word	0x20000080
 800796c:	20000068 	.word	0x20000068

08007970 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	32b0      	adds	r2, #176	@ 0xb0
 8007988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	e014      	b.n	80079c2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d10d      	bne.n	80079c0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	7b1b      	ldrb	r3, [r3, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d109      	bne.n	80079c0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2201      	movs	r2, #1
 80079b0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80079b2:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <USBD_HID_SendReport+0x5c>)
 80079b4:	7819      	ldrb	r1, [r3, #0]
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f001 ff1d 	bl	80097fa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200000d9 	.word	0x200000d9

080079d0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80079d8:	2181      	movs	r1, #129	@ 0x81
 80079da:	4809      	ldr	r0, [pc, #36]	@ (8007a00 <USBD_HID_GetFSCfgDesc+0x30>)
 80079dc:	f000 fc3b 	bl	8008256 <USBD_GetEpDesc>
 80079e0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	220a      	movs	r2, #10
 80079ec:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2222      	movs	r2, #34	@ 0x22
 80079f2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80079f4:	4b02      	ldr	r3, [pc, #8]	@ (8007a00 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000044 	.word	0x20000044

08007a04 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007a0c:	2181      	movs	r1, #129	@ 0x81
 8007a0e:	4809      	ldr	r0, [pc, #36]	@ (8007a34 <USBD_HID_GetHSCfgDesc+0x30>)
 8007a10:	f000 fc21 	bl	8008256 <USBD_GetEpDesc>
 8007a14:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2222      	movs	r2, #34	@ 0x22
 8007a26:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	@ (8007a34 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000044 	.word	0x20000044

08007a38 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007a40:	2181      	movs	r1, #129	@ 0x81
 8007a42:	4809      	ldr	r0, [pc, #36]	@ (8007a68 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007a44:	f000 fc07 	bl	8008256 <USBD_GetEpDesc>
 8007a48:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	220a      	movs	r2, #10
 8007a54:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2222      	movs	r2, #34	@ 0x22
 8007a5a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007a5c:	4b02      	ldr	r3, [pc, #8]	@ (8007a68 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000044 	.word	0x20000044

08007a6c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32b0      	adds	r2, #176	@ 0xb0
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	2200      	movs	r2, #0
 8007a88:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007aa6:	4b03      	ldr	r3, [pc, #12]	@ (8007ab4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20000074 	.word	0x20000074

08007ab8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e01f      	b.n	8007b10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	79fa      	ldrb	r2, [r7, #7]
 8007b02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 fd43 	bl	8009590 <USBD_LL_Init>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e025      	b.n	8007b7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	32ae      	adds	r2, #174	@ 0xae
 8007b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	@ 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	f107 020e 	add.w	r2, r7, #14
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	4602      	mov	r2, r0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fd4b 	bl	8009628 <USBD_LL_Start>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d009      	beq.n	8007be0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	78fa      	ldrb	r2, [r7, #3]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	4611      	mov	r1, r2
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f90c 	bl	8008e4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d01a      	beq.n	8007c90 <USBD_LL_SetupStage+0x72>
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d822      	bhi.n	8007ca4 <USBD_LL_SetupStage+0x86>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <USBD_LL_SetupStage+0x4a>
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d00a      	beq.n	8007c7c <USBD_LL_SetupStage+0x5e>
 8007c66:	e01d      	b.n	8007ca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb63 	bl	800833c <USBD_StdDevReq>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7a:	e020      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fbcb 	bl	8008420 <USBD_StdItfReq>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8e:	e016      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc2d 	bl	80084f8 <USBD_StdEPReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e00c      	b.n	8007cbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007caa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fd18 	bl	80096e8 <USBD_LL_StallEP>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	bf00      	nop
  }

  return ret;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d16e      	bne.n	8007dbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	f040 8098 	bne.w	8007e24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d913      	bls.n	8007d28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	1ad2      	subs	r2, r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bf28      	it	cs
 8007d1a:	4613      	movcs	r3, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 f994 	bl	800904e <USBD_CtlContinueRx>
 8007d26:	e07d      	b.n	8007e24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d014      	beq.n	8007d60 <USBD_LL_DataOutStage+0x98>
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d81d      	bhi.n	8007d76 <USBD_LL_DataOutStage+0xae>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <USBD_LL_DataOutStage+0x7c>
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d003      	beq.n	8007d4a <USBD_LL_DataOutStage+0x82>
 8007d42:	e018      	b.n	8007d76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75bb      	strb	r3, [r7, #22]
            break;
 8007d48:	e018      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fa64 	bl	8008222 <USBD_CoreFindIF>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d5e:	e00d      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa66 	bl	800823c <USBD_CoreFindEP>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75bb      	strb	r3, [r7, #22]
            break;
 8007d74:	e002      	b.n	8007d7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	75bb      	strb	r3, [r7, #22]
            break;
 8007d7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d7c:	7dbb      	ldrb	r3, [r7, #22]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d119      	bne.n	8007db6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d113      	bne.n	8007db6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d8e:	7dba      	ldrb	r2, [r7, #22]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	32ae      	adds	r2, #174	@ 0xae
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d9e:	7dba      	ldrb	r2, [r7, #22]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007da6:	7dba      	ldrb	r2, [r7, #22]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	32ae      	adds	r2, #174	@ 0xae
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f001 f95a 	bl	8009070 <USBD_CtlSendStatus>
 8007dbc:	e032      	b.n	8007e24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fa37 	bl	800823c <USBD_CoreFindEP>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dd2:	7dbb      	ldrb	r3, [r7, #22]
 8007dd4:	2bff      	cmp	r3, #255	@ 0xff
 8007dd6:	d025      	beq.n	8007e24 <USBD_LL_DataOutStage+0x15c>
 8007dd8:	7dbb      	ldrb	r3, [r7, #22]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d122      	bne.n	8007e24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d117      	bne.n	8007e1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007dea:	7dba      	ldrb	r2, [r7, #22]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	32ae      	adds	r2, #174	@ 0xae
 8007df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00f      	beq.n	8007e1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007dfa:	7dba      	ldrb	r2, [r7, #22]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e02:	7dba      	ldrb	r2, [r7, #22]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	32ae      	adds	r2, #174	@ 0xae
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	7afa      	ldrb	r2, [r7, #11]
 8007e10:	4611      	mov	r1, r2
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	e000      	b.n	8007e26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	460b      	mov	r3, r1
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d16f      	bne.n	8007f22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3314      	adds	r3, #20
 8007e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d15a      	bne.n	8007f08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d914      	bls.n	8007e88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 f8bc 	bl	8008ff2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f001 fcdb 	bl	800983c <USBD_LL_PrepareReceive>
 8007e86:	e03f      	b.n	8007f08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d11c      	bne.n	8007ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d316      	bcc.n	8007ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d20f      	bcs.n	8007ece <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f001 f89d 	bl	8008ff2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 fcb8 	bl	800983c <USBD_LL_PrepareReceive>
 8007ecc:	e01c      	b.n	8007f08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d10f      	bne.n	8007efa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007efa:	2180      	movs	r1, #128	@ 0x80
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fbf3 	bl	80096e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f8c7 	bl	8009096 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d03a      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fe42 	bl	8007b9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f20:	e032      	b.n	8007f88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f985 	bl	800823c <USBD_CoreFindEP>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2bff      	cmp	r3, #255	@ 0xff
 8007f3a:	d025      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d122      	bne.n	8007f88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d11c      	bne.n	8007f88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f4e:	7dfa      	ldrb	r2, [r7, #23]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	32ae      	adds	r2, #174	@ 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d014      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f5e:	7dfa      	ldrb	r2, [r7, #23]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f66:	7dfa      	ldrb	r2, [r7, #23]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	32ae      	adds	r2, #174	@ 0xae
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	7afa      	ldrb	r2, [r7, #11]
 8007f74:	4611      	mov	r1, r2
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f7e:	7dbb      	ldrb	r3, [r7, #22]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
 8007f86:	e000      	b.n	8007f8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d014      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6852      	ldr	r2, [r2, #4]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	4611      	mov	r1, r2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ff8:	2340      	movs	r3, #64	@ 0x40
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fb2d 	bl	800965e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2240      	movs	r2, #64	@ 0x40
 8008010:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008014:	2340      	movs	r3, #64	@ 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	2180      	movs	r1, #128	@ 0x80
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fb1f 	bl	800965e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2240      	movs	r2, #64	@ 0x40
 800802a:	621a      	str	r2, [r3, #32]

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b04      	cmp	r3, #4
 8008068:	d006      	beq.n	8008078 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008070:	b2da      	uxtb	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2204      	movs	r2, #4
 800807c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d106      	bne.n	80080b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d110      	bne.n	80080f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32ae      	adds	r2, #174	@ 0xae
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	e01c      	b.n	800815a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b03      	cmp	r3, #3
 800812a:	d115      	bne.n	8008158 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	@ 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	@ 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	32ae      	adds	r2, #174	@ 0xae
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008180:	2303      	movs	r3, #3
 8008182:	e01c      	b.n	80081be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b03      	cmp	r3, #3
 800818e:	d115      	bne.n	80081bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32ae      	adds	r2, #174	@ 0xae
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32ae      	adds	r2, #174	@ 0xae
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	4611      	mov	r1, r2
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6852      	ldr	r2, [r2, #4]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800822e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008248:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	b29b      	uxth	r3, r3
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	4293      	cmp	r3, r2
 800827a:	d91f      	bls.n	80082bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008282:	e013      	b.n	80082ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008284:	f107 030a 	add.w	r3, r7, #10
 8008288:	4619      	mov	r1, r3
 800828a:	6978      	ldr	r0, [r7, #20]
 800828c:	f000 f81b 	bl	80082c6 <USBD_GetNextDesc>
 8008290:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b05      	cmp	r3, #5
 8008298:	d108      	bne.n	80082ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	789b      	ldrb	r3, [r3, #2]
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d008      	beq.n	80082ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	885b      	ldrh	r3, [r3, #2]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	897b      	ldrh	r3, [r7, #10]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d8e5      	bhi.n	8008284 <USBD_GetEpDesc+0x2e>
 80082b8:	e000      	b.n	80082bc <USBD_GetEpDesc+0x66>
          break;
 80082ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082bc:	693b      	ldr	r3, [r7, #16]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b085      	sub	sp, #20
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082fe:	b480      	push	{r7}
 8008300:	b087      	sub	sp, #28
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	3301      	adds	r3, #1
 8008314:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800831c:	8a3b      	ldrh	r3, [r7, #16]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	b21a      	sxth	r2, r3
 8008322:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008326:	4313      	orrs	r3, r2
 8008328:	b21b      	sxth	r3, r3
 800832a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800832c:	89fb      	ldrh	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d005      	beq.n	8008362 <USBD_StdDevReq+0x26>
 8008356:	2b40      	cmp	r3, #64	@ 0x40
 8008358:	d857      	bhi.n	800840a <USBD_StdDevReq+0xce>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <USBD_StdDevReq+0x42>
 800835e:	2b20      	cmp	r3, #32
 8008360:	d153      	bne.n	800840a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32ae      	adds	r2, #174	@ 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	e04a      	b.n	8008414 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b09      	cmp	r3, #9
 8008384:	d83b      	bhi.n	80083fe <USBD_StdDevReq+0xc2>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <USBD_StdDevReq+0x50>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083e1 	.word	0x080083e1
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080083ff 	.word	0x080083ff
 8008398:	080083eb 	.word	0x080083eb
 800839c:	080083ff 	.word	0x080083ff
 80083a0:	080083bf 	.word	0x080083bf
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083ff 	.word	0x080083ff
 80083ac:	080083d7 	.word	0x080083d7
 80083b0:	080083c9 	.word	0x080083c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa3c 	bl	8008834 <USBD_GetDescriptor>
          break;
 80083bc:	e024      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fba1 	bl	8008b08 <USBD_SetAddress>
          break;
 80083c6:	e01f      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbe0 	bl	8008b90 <USBD_SetConfig>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
          break;
 80083d4:	e018      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc83 	bl	8008ce4 <USBD_GetConfig>
          break;
 80083de:	e013      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fcb4 	bl	8008d50 <USBD_GetStatus>
          break;
 80083e8:	e00e      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fce3 	bl	8008db8 <USBD_SetFeature>
          break;
 80083f2:	e009      	b.n	8008408 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fd07 	bl	8008e0a <USBD_ClrFeature>
          break;
 80083fc:	e004      	b.n	8008408 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fd5e 	bl	8008ec2 <USBD_CtlError>
          break;
 8008406:	bf00      	nop
      }
      break;
 8008408:	e004      	b.n	8008414 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fd58 	bl	8008ec2 <USBD_CtlError>
      break;
 8008412:	bf00      	nop
  }

  return ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008436:	2b40      	cmp	r3, #64	@ 0x40
 8008438:	d005      	beq.n	8008446 <USBD_StdItfReq+0x26>
 800843a:	2b40      	cmp	r3, #64	@ 0x40
 800843c:	d852      	bhi.n	80084e4 <USBD_StdItfReq+0xc4>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <USBD_StdItfReq+0x26>
 8008442:	2b20      	cmp	r3, #32
 8008444:	d14e      	bne.n	80084e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800844c:	b2db      	uxtb	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	2b02      	cmp	r3, #2
 8008452:	d840      	bhi.n	80084d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	889b      	ldrh	r3, [r3, #4]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	d836      	bhi.n	80084cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	889b      	ldrh	r3, [r3, #4]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fedb 	bl	8008222 <USBD_CoreFindIF>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2bff      	cmp	r3, #255	@ 0xff
 8008474:	d01d      	beq.n	80084b2 <USBD_StdItfReq+0x92>
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d11a      	bne.n	80084b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800847c:	7bba      	ldrb	r2, [r7, #14]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32ae      	adds	r2, #174	@ 0xae
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00f      	beq.n	80084ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800848c:	7bba      	ldrb	r2, [r7, #14]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008494:	7bba      	ldrb	r2, [r7, #14]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32ae      	adds	r2, #174	@ 0xae
 800849a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084aa:	e004      	b.n	80084b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084b0:	e001      	b.n	80084b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084b2:	2303      	movs	r3, #3
 80084b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d110      	bne.n	80084e0 <USBD_StdItfReq+0xc0>
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10d      	bne.n	80084e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fdd3 	bl	8009070 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ca:	e009      	b.n	80084e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fcf7 	bl	8008ec2 <USBD_CtlError>
          break;
 80084d4:	e004      	b.n	80084e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fcf2 	bl	8008ec2 <USBD_CtlError>
          break;
 80084de:	e000      	b.n	80084e2 <USBD_StdItfReq+0xc2>
          break;
 80084e0:	bf00      	nop
      }
      break;
 80084e2:	e004      	b.n	80084ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fceb 	bl	8008ec2 <USBD_CtlError>
      break;
 80084ec:	bf00      	nop
  }

  return ret;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008514:	2b40      	cmp	r3, #64	@ 0x40
 8008516:	d007      	beq.n	8008528 <USBD_StdEPReq+0x30>
 8008518:	2b40      	cmp	r3, #64	@ 0x40
 800851a:	f200 817f 	bhi.w	800881c <USBD_StdEPReq+0x324>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d02a      	beq.n	8008578 <USBD_StdEPReq+0x80>
 8008522:	2b20      	cmp	r3, #32
 8008524:	f040 817a 	bne.w	800881c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fe85 	bl	800823c <USBD_CoreFindEP>
 8008532:	4603      	mov	r3, r0
 8008534:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008536:	7b7b      	ldrb	r3, [r7, #13]
 8008538:	2bff      	cmp	r3, #255	@ 0xff
 800853a:	f000 8174 	beq.w	8008826 <USBD_StdEPReq+0x32e>
 800853e:	7b7b      	ldrb	r3, [r7, #13]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f040 8170 	bne.w	8008826 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008546:	7b7a      	ldrb	r2, [r7, #13]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800854e:	7b7a      	ldrb	r2, [r7, #13]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	32ae      	adds	r2, #174	@ 0xae
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8163 	beq.w	8008826 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008560:	7b7a      	ldrb	r2, [r7, #13]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	32ae      	adds	r2, #174	@ 0xae
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008576:	e156      	b.n	8008826 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d008      	beq.n	8008592 <USBD_StdEPReq+0x9a>
 8008580:	2b03      	cmp	r3, #3
 8008582:	f300 8145 	bgt.w	8008810 <USBD_StdEPReq+0x318>
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 809b 	beq.w	80086c2 <USBD_StdEPReq+0x1ca>
 800858c:	2b01      	cmp	r3, #1
 800858e:	d03c      	beq.n	800860a <USBD_StdEPReq+0x112>
 8008590:	e13e      	b.n	8008810 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d002      	beq.n	80085a4 <USBD_StdEPReq+0xac>
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d016      	beq.n	80085d0 <USBD_StdEPReq+0xd8>
 80085a2:	e02c      	b.n	80085fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <USBD_StdEPReq+0xce>
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b80      	cmp	r3, #128	@ 0x80
 80085ae:	d00a      	beq.n	80085c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f897 	bl	80096e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ba:	2180      	movs	r1, #128	@ 0x80
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f893 	bl	80096e8 <USBD_LL_StallEP>
 80085c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085c4:	e020      	b.n	8008608 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc7a 	bl	8008ec2 <USBD_CtlError>
              break;
 80085ce:	e01b      	b.n	8008608 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10e      	bne.n	80085f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <USBD_StdEPReq+0xfe>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d008      	beq.n	80085f6 <USBD_StdEPReq+0xfe>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	88db      	ldrh	r3, [r3, #6]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f879 	bl	80096e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fd3a 	bl	8009070 <USBD_CtlSendStatus>

              break;
 80085fc:	e004      	b.n	8008608 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fc5e 	bl	8008ec2 <USBD_CtlError>
              break;
 8008606:	bf00      	nop
          }
          break;
 8008608:	e107      	b.n	800881a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d002      	beq.n	800861c <USBD_StdEPReq+0x124>
 8008616:	2b03      	cmp	r3, #3
 8008618:	d016      	beq.n	8008648 <USBD_StdEPReq+0x150>
 800861a:	e04b      	b.n	80086b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00d      	beq.n	800863e <USBD_StdEPReq+0x146>
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b80      	cmp	r3, #128	@ 0x80
 8008626:	d00a      	beq.n	800863e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 f85b 	bl	80096e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008632:	2180      	movs	r1, #128	@ 0x80
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 f857 	bl	80096e8 <USBD_LL_StallEP>
 800863a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800863c:	e040      	b.n	80086c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc3e 	bl	8008ec2 <USBD_CtlError>
              break;
 8008646:	e03b      	b.n	80086c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	885b      	ldrh	r3, [r3, #2]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d136      	bne.n	80086be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 f861 	bl	8009726 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fd03 	bl	8009070 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff fde4 	bl	800823c <USBD_CoreFindEP>
 8008674:	4603      	mov	r3, r0
 8008676:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008678:	7b7b      	ldrb	r3, [r7, #13]
 800867a:	2bff      	cmp	r3, #255	@ 0xff
 800867c:	d01f      	beq.n	80086be <USBD_StdEPReq+0x1c6>
 800867e:	7b7b      	ldrb	r3, [r7, #13]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11c      	bne.n	80086be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008684:	7b7a      	ldrb	r2, [r7, #13]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800868c:	7b7a      	ldrb	r2, [r7, #13]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	32ae      	adds	r2, #174	@ 0xae
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d010      	beq.n	80086be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800869c:	7b7a      	ldrb	r2, [r7, #13]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32ae      	adds	r2, #174	@ 0xae
 80086a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086b2:	e004      	b.n	80086be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc03 	bl	8008ec2 <USBD_CtlError>
              break;
 80086bc:	e000      	b.n	80086c0 <USBD_StdEPReq+0x1c8>
              break;
 80086be:	bf00      	nop
          }
          break;
 80086c0:	e0ab      	b.n	800881a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d002      	beq.n	80086d4 <USBD_StdEPReq+0x1dc>
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d032      	beq.n	8008738 <USBD_StdEPReq+0x240>
 80086d2:	e097      	b.n	8008804 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <USBD_StdEPReq+0x1f2>
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b80      	cmp	r3, #128	@ 0x80
 80086de:	d004      	beq.n	80086ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fbed 	bl	8008ec2 <USBD_CtlError>
                break;
 80086e8:	e091      	b.n	800880e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da0b      	bge.n	800870a <USBD_StdEPReq+0x212>
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	3310      	adds	r3, #16
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	3304      	adds	r3, #4
 8008708:	e00b      	b.n	8008722 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	3304      	adds	r3, #4
 8008722:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2202      	movs	r2, #2
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fc43 	bl	8008fbc <USBD_CtlSendData>
              break;
 8008736:	e06a      	b.n	800880e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873c:	2b00      	cmp	r3, #0
 800873e:	da11      	bge.n	8008764 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f003 020f 	and.w	r2, r3, #15
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	3324      	adds	r3, #36	@ 0x24
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d117      	bne.n	800878a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fbb0 	bl	8008ec2 <USBD_CtlError>
                  break;
 8008762:	e054      	b.n	800880e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 020f 	and.w	r2, r3, #15
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb9d 	bl	8008ec2 <USBD_CtlError>
                  break;
 8008788:	e041      	b.n	800880e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800878a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da0b      	bge.n	80087aa <USBD_StdEPReq+0x2b2>
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	3310      	adds	r3, #16
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	3304      	adds	r3, #4
 80087a8:	e00b      	b.n	80087c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4413      	add	r3, r2
 80087c0:	3304      	adds	r3, #4
 80087c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <USBD_StdEPReq+0x2d8>
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b80      	cmp	r3, #128	@ 0x80
 80087ce:	d103      	bne.n	80087d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e00e      	b.n	80087f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ffc1 	bl	8009764 <USBD_LL_IsStallEP>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e002      	b.n	80087f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2202      	movs	r2, #2
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fbdd 	bl	8008fbc <USBD_CtlSendData>
              break;
 8008802:	e004      	b.n	800880e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb5b 	bl	8008ec2 <USBD_CtlError>
              break;
 800880c:	bf00      	nop
          }
          break;
 800880e:	e004      	b.n	800881a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fb55 	bl	8008ec2 <USBD_CtlError>
          break;
 8008818:	bf00      	nop
      }
      break;
 800881a:	e005      	b.n	8008828 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fb4f 	bl	8008ec2 <USBD_CtlError>
      break;
 8008824:	e000      	b.n	8008828 <USBD_StdEPReq+0x330>
      break;
 8008826:	bf00      	nop
  }

  return ret;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	2b06      	cmp	r3, #6
 8008856:	f200 8128 	bhi.w	8008aaa <USBD_GetDescriptor+0x276>
 800885a:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <USBD_GetDescriptor+0x2c>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008895 	.word	0x08008895
 8008868:	080088d5 	.word	0x080088d5
 800886c:	08008aab 	.word	0x08008aab
 8008870:	08008aab 	.word	0x08008aab
 8008874:	08008a4b 	.word	0x08008a4b
 8008878:	08008a77 	.word	0x08008a77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	f107 0108 	add.w	r1, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
      break;
 8008892:	e112      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7c1b      	ldrb	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10d      	bne.n	80088b8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	f107 0208 	add.w	r2, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088b6:	e100      	b.n	8008aba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	f107 0208 	add.w	r2, r7, #8
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	2202      	movs	r2, #2
 80088d0:	701a      	strb	r2, [r3, #0]
      break;
 80088d2:	e0f2      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b05      	cmp	r3, #5
 80088dc:	f200 80ac 	bhi.w	8008a38 <USBD_GetDescriptor+0x204>
 80088e0:	a201      	add	r2, pc, #4	@ (adr r2, 80088e8 <USBD_GetDescriptor+0xb4>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008969 	.word	0x08008969
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	080089d1 	.word	0x080089d1
 80088fc:	08008a05 	.word	0x08008a05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7c12      	ldrb	r2, [r2, #16]
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008922:	e091      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 facb 	bl	8008ec2 <USBD_CtlError>
            err++;
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	3301      	adds	r3, #1
 8008930:	72fb      	strb	r3, [r7, #11]
          break;
 8008932:	e089      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008956:	e077      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fab1 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
          break;
 8008966:	e06f      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e05d      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa97 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e055      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e043      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa7d 	bl	8008ec2 <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e03b      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e029      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa63 	bl	8008ec2 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e021      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e00f      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa49 	bl	8008ec2 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e007      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa41 	bl	8008ec2 <USBD_CtlError>
          err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a46:	bf00      	nop
      }
      break;
 8008a48:	e037      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7c1b      	ldrb	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5a:	f107 0208 	add.w	r2, r7, #8
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4798      	blx	r3
 8008a62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a64:	e029      	b.n	8008aba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa2a 	bl	8008ec2 <USBD_CtlError>
        err++;
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	3301      	adds	r3, #1
 8008a72:	72fb      	strb	r3, [r7, #11]
      break;
 8008a74:	e021      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7c1b      	ldrb	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	f107 0208 	add.w	r2, r7, #8
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4798      	blx	r3
 8008a8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	2207      	movs	r2, #7
 8008a96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a98:	e00f      	b.n	8008aba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa10 	bl	8008ec2 <USBD_CtlError>
        err++;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa8:	e007      	b.n	8008aba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa08 	bl	8008ec2 <USBD_CtlError>
      err++;
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab8:	bf00      	nop
  }

  if (err != 0U)
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d11e      	bne.n	8008afe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	88db      	ldrh	r3, [r3, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d016      	beq.n	8008af6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88da      	ldrh	r2, [r3, #6]
 8008ad2:	893b      	ldrh	r3, [r7, #8]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bf28      	it	cs
 8008ad8:	4613      	movcs	r3, r2
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ade:	893b      	ldrh	r3, [r7, #8]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa69 	bl	8008fbc <USBD_CtlSendData>
 8008aea:	e009      	b.n	8008b00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9e7 	bl	8008ec2 <USBD_CtlError>
 8008af4:	e004      	b.n	8008b00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 faba 	bl	8009070 <USBD_CtlSendStatus>
 8008afc:	e000      	b.n	8008b00 <USBD_GetDescriptor+0x2cc>
    return;
 8008afe:	bf00      	nop
  }
}
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop

08008b08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	889b      	ldrh	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d131      	bne.n	8008b7e <USBD_SetAddress+0x76>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d12d      	bne.n	8008b7e <USBD_SetAddress+0x76>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b28:	d829      	bhi.n	8008b7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d104      	bne.n	8008b4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f9bc 	bl	8008ec2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4a:	e01d      	b.n	8008b88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7bfa      	ldrb	r2, [r7, #15]
 8008b50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fe2f 	bl	80097bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa86 	bl	8009070 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	e009      	b.n	8008b88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	e004      	b.n	8008b88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f99e 	bl	8008ec2 <USBD_CtlError>
  }
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d905      	bls.n	8008bbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f985 	bl	8008ec2 <USBD_CtlError>
    return USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e08c      	b.n	8008cd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d002      	beq.n	8008bce <USBD_SetConfig+0x3e>
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d029      	beq.n	8008c20 <USBD_SetConfig+0x90>
 8008bcc:	e075      	b.n	8008cba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bce:	4b44      	ldr	r3, [pc, #272]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d020      	beq.n	8008c18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bd6:	4b42      	ldr	r3, [pc, #264]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fe ffe3 	bl	8007bb2 <USBD_SetClassConfig>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d008      	beq.n	8008c08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f962 	bl	8008ec2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2202      	movs	r2, #2
 8008c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c06:	e065      	b.n	8008cd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa31 	bl	8009070 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2203      	movs	r2, #3
 8008c12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c16:	e05d      	b.n	8008cd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa29 	bl	8009070 <USBD_CtlSendStatus>
      break;
 8008c1e:	e059      	b.n	8008cd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c20:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d112      	bne.n	8008c4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c30:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c3a:	4b29      	ldr	r3, [pc, #164]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fe ffd2 	bl	8007bea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa12 	bl	8009070 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c4c:	e042      	b.n	8008cd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c4e:	4b24      	ldr	r3, [pc, #144]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d02a      	beq.n	8008cb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fe ffc0 	bl	8007bea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fe ff99 	bl	8007bb2 <USBD_SetClassConfig>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f918 	bl	8008ec2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe ffa5 	bl	8007bea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ca8:	e014      	b.n	8008cd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f9e0 	bl	8009070 <USBD_CtlSendStatus>
      break;
 8008cb0:	e010      	b.n	8008cd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f9dc 	bl	8009070 <USBD_CtlSendStatus>
      break;
 8008cb8:	e00c      	b.n	8008cd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f900 	bl	8008ec2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cc2:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <USBD_SetConfig+0x150>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fe ff8e 	bl	8007bea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	bf00      	nop
  }

  return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	2000023e 	.word	0x2000023e

08008ce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d004      	beq.n	8008d00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f8e2 	bl	8008ec2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cfe:	e023      	b.n	8008d48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	dc02      	bgt.n	8008d12 <USBD_GetConfig+0x2e>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc03      	bgt.n	8008d18 <USBD_GetConfig+0x34>
 8008d10:	e015      	b.n	8008d3e <USBD_GetConfig+0x5a>
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d00b      	beq.n	8008d2e <USBD_GetConfig+0x4a>
 8008d16:	e012      	b.n	8008d3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3308      	adds	r3, #8
 8008d22:	2201      	movs	r2, #1
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f948 	bl	8008fbc <USBD_CtlSendData>
        break;
 8008d2c:	e00c      	b.n	8008d48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3304      	adds	r3, #4
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f940 	bl	8008fbc <USBD_CtlSendData>
        break;
 8008d3c:	e004      	b.n	8008d48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8be 	bl	8008ec2 <USBD_CtlError>
        break;
 8008d46:	bf00      	nop
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d81e      	bhi.n	8008da6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	88db      	ldrh	r3, [r3, #6]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d004      	beq.n	8008d7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f8a5 	bl	8008ec2 <USBD_CtlError>
        break;
 8008d78:	e01a      	b.n	8008db0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f90c 	bl	8008fbc <USBD_CtlSendData>
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f88a 	bl	8008ec2 <USBD_CtlError>
      break;
 8008dae:	bf00      	nop
  }
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d107      	bne.n	8008dda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f94c 	bl	8009070 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008dd8:	e013      	b.n	8008e02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d10b      	bne.n	8008dfa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	889b      	ldrh	r3, [r3, #4]
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f93c 	bl	8009070 <USBD_CtlSendStatus>
}
 8008df8:	e003      	b.n	8008e02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f860 	bl	8008ec2 <USBD_CtlError>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d80b      	bhi.n	8008e3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10c      	bne.n	8008e44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f91c 	bl	8009070 <USBD_CtlSendStatus>
      }
      break;
 8008e38:	e004      	b.n	8008e44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f840 	bl	8008ec2 <USBD_CtlError>
      break;
 8008e42:	e000      	b.n	8008e46 <USBD_ClrFeature+0x3c>
      break;
 8008e44:	bf00      	nop
  }
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fa40 	bl	80082fe <SWAPBYTE>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fa33 	bl	80082fe <SWAPBYTE>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff fa26 	bl	80082fe <SWAPBYTE>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	80da      	strh	r2, [r3, #6]
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ecc:	2180      	movs	r1, #128	@ 0x80
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc0a 	bl	80096e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fc06 	bl	80096e8 <USBD_LL_StallEP>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d042      	beq.n	8008f80 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008efe:	6938      	ldr	r0, [r7, #16]
 8008f00:	f000 f842 	bl	8008f88 <USBD_GetLen>
 8008f04:	4603      	mov	r3, r0
 8008f06:	3301      	adds	r3, #1
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f0e:	d808      	bhi.n	8008f22 <USBD_GetString+0x3e>
 8008f10:	6938      	ldr	r0, [r7, #16]
 8008f12:	f000 f839 	bl	8008f88 <USBD_GetLen>
 8008f16:	4603      	mov	r3, r0
 8008f18:	3301      	adds	r3, #1
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	e001      	b.n	8008f26 <USBD_GetString+0x42>
 8008f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	4413      	add	r3, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	2203      	movs	r2, #3
 8008f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f4c:	e013      	b.n	8008f76 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
    idx++;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	3301      	adds	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	3301      	adds	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e7      	bne.n	8008f4e <USBD_GetString+0x6a>
 8008f7e:	e000      	b.n	8008f82 <USBD_GetString+0x9e>
    return;
 8008f80:	bf00      	nop
  }
}
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f98:	e005      	b.n	8008fa6 <USBD_GetLen+0x1e>
  {
    len++;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f5      	bne.n	8008f9a <USBD_GetLen+0x12>
  }

  return len;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */
  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fc09 	bl	80097fa <USBD_LL_Transmit>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	2100      	movs	r1, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fbf8 	bl	80097fa <USBD_LL_Transmit>

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2203      	movs	r2, #3
 8009024:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	2100      	movs	r1, #0
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fbfc 	bl	800983c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fbeb 	bl	800983c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2204      	movs	r2, #4
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fbb7 	bl	80097fa <USBD_LL_Transmit>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2205      	movs	r2, #5
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fbc5 	bl	800983c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090c0:	2200      	movs	r2, #0
 80090c2:	490e      	ldr	r1, [pc, #56]	@ (80090fc <MX_USB_DEVICE_Init+0x40>)
 80090c4:	480e      	ldr	r0, [pc, #56]	@ (8009100 <MX_USB_DEVICE_Init+0x44>)
 80090c6:	f7fe fcf7 	bl	8007ab8 <USBD_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090d0:	f7f7 fee4 	bl	8000e9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80090d4:	490b      	ldr	r1, [pc, #44]	@ (8009104 <MX_USB_DEVICE_Init+0x48>)
 80090d6:	480a      	ldr	r0, [pc, #40]	@ (8009100 <MX_USB_DEVICE_Init+0x44>)
 80090d8:	f7fe fd1e 	bl	8007b18 <USBD_RegisterClass>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090e2:	f7f7 fedb 	bl	8000e9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090e6:	4806      	ldr	r0, [pc, #24]	@ (8009100 <MX_USB_DEVICE_Init+0x44>)
 80090e8:	f7fe fd4c 	bl	8007b84 <USBD_Start>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80090f2:	f7f7 fed3 	bl	8000e9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090f6:	bf00      	nop
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200000dc 	.word	0x200000dc
 8009100:	20000240 	.word	0x20000240
 8009104:	2000000c 	.word	0x2000000c

08009108 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2212      	movs	r2, #18
 8009118:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800911a:	4b03      	ldr	r3, [pc, #12]	@ (8009128 <USBD_FS_DeviceDescriptor+0x20>)
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	200000f8 	.word	0x200000f8

0800912c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2204      	movs	r2, #4
 800913c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800913e:	4b03      	ldr	r3, [pc, #12]	@ (800914c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	2000010c 	.word	0x2000010c

08009150 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d105      	bne.n	800916e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4907      	ldr	r1, [pc, #28]	@ (8009184 <USBD_FS_ProductStrDescriptor+0x34>)
 8009166:	4808      	ldr	r0, [pc, #32]	@ (8009188 <USBD_FS_ProductStrDescriptor+0x38>)
 8009168:	f7ff febc 	bl	8008ee4 <USBD_GetString>
 800916c:	e004      	b.n	8009178 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4904      	ldr	r1, [pc, #16]	@ (8009184 <USBD_FS_ProductStrDescriptor+0x34>)
 8009172:	4805      	ldr	r0, [pc, #20]	@ (8009188 <USBD_FS_ProductStrDescriptor+0x38>)
 8009174:	f7ff feb6 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009178:	4b02      	ldr	r3, [pc, #8]	@ (8009184 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	2000051c 	.word	0x2000051c
 8009188:	08009b3c 	.word	0x08009b3c

0800918c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	4904      	ldr	r1, [pc, #16]	@ (80091ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800919c:	4804      	ldr	r0, [pc, #16]	@ (80091b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800919e:	f7ff fea1 	bl	8008ee4 <USBD_GetString>
  return USBD_StrDesc;
 80091a2:	4b02      	ldr	r3, [pc, #8]	@ (80091ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000051c 	.word	0x2000051c
 80091b0:	08009b4c 	.word	0x08009b4c

080091b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	6039      	str	r1, [r7, #0]
 80091be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	221a      	movs	r2, #26
 80091c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091c6:	f000 f843 	bl	8009250 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ca:	4b02      	ldr	r3, [pc, #8]	@ (80091d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000110 	.word	0x20000110

080091d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d105      	bne.n	80091f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	4907      	ldr	r1, [pc, #28]	@ (800920c <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ee:	4808      	ldr	r0, [pc, #32]	@ (8009210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091f0:	f7ff fe78 	bl	8008ee4 <USBD_GetString>
 80091f4:	e004      	b.n	8009200 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4904      	ldr	r1, [pc, #16]	@ (800920c <USBD_FS_ConfigStrDescriptor+0x34>)
 80091fa:	4805      	ldr	r0, [pc, #20]	@ (8009210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091fc:	f7ff fe72 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009200:	4b02      	ldr	r3, [pc, #8]	@ (800920c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	2000051c 	.word	0x2000051c
 8009210:	08009b54 	.word	0x08009b54

08009214 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	6039      	str	r1, [r7, #0]
 800921e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d105      	bne.n	8009232 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	4907      	ldr	r1, [pc, #28]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800922a:	4808      	ldr	r0, [pc, #32]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800922c:	f7ff fe5a 	bl	8008ee4 <USBD_GetString>
 8009230:	e004      	b.n	800923c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4904      	ldr	r1, [pc, #16]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009236:	4805      	ldr	r0, [pc, #20]	@ (800924c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009238:	f7ff fe54 	bl	8008ee4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800923c:	4b02      	ldr	r3, [pc, #8]	@ (8009248 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	2000051c 	.word	0x2000051c
 800924c:	08009b60 	.word	0x08009b60

08009250 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009256:	4b0f      	ldr	r3, [pc, #60]	@ (8009294 <Get_SerialNum+0x44>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800925c:	4b0e      	ldr	r3, [pc, #56]	@ (8009298 <Get_SerialNum+0x48>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009262:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <Get_SerialNum+0x4c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009276:	2208      	movs	r2, #8
 8009278:	4909      	ldr	r1, [pc, #36]	@ (80092a0 <Get_SerialNum+0x50>)
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f814 	bl	80092a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009280:	2204      	movs	r2, #4
 8009282:	4908      	ldr	r1, [pc, #32]	@ (80092a4 <Get_SerialNum+0x54>)
 8009284:	68b8      	ldr	r0, [r7, #8]
 8009286:	f000 f80f 	bl	80092a8 <IntToUnicode>
  }
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	1fff7a10 	.word	0x1fff7a10
 8009298:	1fff7a14 	.word	0x1fff7a14
 800929c:	1fff7a18 	.word	0x1fff7a18
 80092a0:	20000112 	.word	0x20000112
 80092a4:	20000122 	.word	0x20000122

080092a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	75fb      	strb	r3, [r7, #23]
 80092be:	e027      	b.n	8009310 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0f1b      	lsrs	r3, r3, #28
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d80b      	bhi.n	80092e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	0f1b      	lsrs	r3, r3, #28
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	4619      	mov	r1, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	440b      	add	r3, r1
 80092d8:	3230      	adds	r2, #48	@ 0x30
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	e00a      	b.n	80092f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0f1b      	lsrs	r3, r3, #28
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4619      	mov	r1, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	440b      	add	r3, r1
 80092f0:	3237      	adds	r2, #55	@ 0x37
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	3301      	adds	r3, #1
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	4413      	add	r3, r2
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	3301      	adds	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]
 8009310:	7dfa      	ldrb	r2, [r7, #23]
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	429a      	cmp	r2, r3
 8009316:	d3d3      	bcc.n	80092c0 <IntToUnicode+0x18>
  }
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	@ 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009330:	f107 0314 	add.w	r3, r7, #20
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	609a      	str	r2, [r3, #8]
 800933c:	60da      	str	r2, [r3, #12]
 800933e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009348:	d132      	bne.n	80093b0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	4b1a      	ldr	r3, [pc, #104]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 8009350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009352:	4a19      	ldr	r2, [pc, #100]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 8009354:	f043 0301 	orr.w	r3, r3, #1
 8009358:	6313      	str	r3, [r2, #48]	@ 0x30
 800935a:	4b17      	ldr	r3, [pc, #92]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 800935c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009366:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800936a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936c:	2302      	movs	r3, #2
 800936e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009374:	2303      	movs	r3, #3
 8009376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009378:	230a      	movs	r3, #10
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937c:	f107 0314 	add.w	r3, r7, #20
 8009380:	4619      	mov	r1, r3
 8009382:	480e      	ldr	r0, [pc, #56]	@ (80093bc <HAL_PCD_MspInit+0x94>)
 8009384:	f7f8 f898 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009388:	4b0b      	ldr	r3, [pc, #44]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 800938a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800938c:	4a0a      	ldr	r2, [pc, #40]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 800938e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009392:	6353      	str	r3, [r2, #52]	@ 0x34
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	4b07      	ldr	r3, [pc, #28]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 800939a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800939c:	4a06      	ldr	r2, [pc, #24]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 800939e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80093a4:	4b04      	ldr	r3, [pc, #16]	@ (80093b8 <HAL_PCD_MspInit+0x90>)
 80093a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093b0:	bf00      	nop
 80093b2:	3728      	adds	r7, #40	@ 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40023800 	.word	0x40023800
 80093bc:	40020000 	.word	0x40020000

080093c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7fe fc21 	bl	8007c1e <USBD_LL_SetupStage>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093f6:	78fa      	ldrb	r2, [r7, #3]
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	4619      	mov	r1, r3
 800940e:	f7fe fc5b 	bl	8007cc8 <USBD_LL_DataOutStage>
}
 8009412:	bf00      	nop
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4613      	mov	r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	3320      	adds	r3, #32
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	4619      	mov	r1, r3
 8009442:	f7fe fcf4 	bl	8007e2e <USBD_LL_DataInStage>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fe2e 	bl	80080be <USBD_LL_SOF>
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009472:	2301      	movs	r3, #1
 8009474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	79db      	ldrb	r3, [r3, #7]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d001      	beq.n	8009482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800947e:	f7f7 fd0d 	bl	8000e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009488:	7bfa      	ldrb	r2, [r7, #15]
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fdd2 	bl	8008036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fd7a 	bl	8007f92 <USBD_LL_Reset>
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fdcd 	bl	8008056 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094ce:	f043 0301 	orr.w	r3, r3, #1
 80094d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7adb      	ldrb	r3, [r3, #11]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094dc:	4b04      	ldr	r3, [pc, #16]	@ (80094f0 <HAL_PCD_SuspendCallback+0x48>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	4a03      	ldr	r2, [pc, #12]	@ (80094f0 <HAL_PCD_SuspendCallback+0x48>)
 80094e2:	f043 0306 	orr.w	r3, r3, #6
 80094e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	e000ed00 	.word	0xe000ed00

080094f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fdc3 	bl	800808e <USBD_LL_Resume>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009522:	78fa      	ldrb	r2, [r7, #3]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe fe1b 	bl	8008162 <USBD_LL_IsoOUTIncomplete>
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fdd7 	bl	80080fe <USBD_LL_IsoINIncomplete>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fe2d 	bl	80081c6 <USBD_LL_DevConnected>
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fe2a 	bl	80081dc <USBD_LL_DevDisconnected>
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d13c      	bne.n	800961a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095a0:	4a20      	ldr	r2, [pc, #128]	@ (8009624 <USBD_LL_Init+0x94>)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009624 <USBD_LL_Init+0x94>)
 80095ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009624 <USBD_LL_Init+0x94>)
 80095b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <USBD_LL_Init+0x94>)
 80095ba:	2204      	movs	r2, #4
 80095bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095be:	4b19      	ldr	r3, [pc, #100]	@ (8009624 <USBD_LL_Init+0x94>)
 80095c0:	2202      	movs	r2, #2
 80095c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095c4:	4b17      	ldr	r3, [pc, #92]	@ (8009624 <USBD_LL_Init+0x94>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095ca:	4b16      	ldr	r3, [pc, #88]	@ (8009624 <USBD_LL_Init+0x94>)
 80095cc:	2202      	movs	r2, #2
 80095ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095d0:	4b14      	ldr	r3, [pc, #80]	@ (8009624 <USBD_LL_Init+0x94>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095d6:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <USBD_LL_Init+0x94>)
 80095d8:	2200      	movs	r2, #0
 80095da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095dc:	4b11      	ldr	r3, [pc, #68]	@ (8009624 <USBD_LL_Init+0x94>)
 80095de:	2200      	movs	r2, #0
 80095e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095e2:	4b10      	ldr	r3, [pc, #64]	@ (8009624 <USBD_LL_Init+0x94>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <USBD_LL_Init+0x94>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095ee:	480d      	ldr	r0, [pc, #52]	@ (8009624 <USBD_LL_Init+0x94>)
 80095f0:	f7fa fe0d 	bl	800420e <HAL_PCD_Init>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095fa:	f7f7 fc4f 	bl	8000e9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095fe:	2180      	movs	r1, #128	@ 0x80
 8009600:	4808      	ldr	r0, [pc, #32]	@ (8009624 <USBD_LL_Init+0x94>)
 8009602:	f7fc f822 	bl	800564a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009606:	2240      	movs	r2, #64	@ 0x40
 8009608:	2100      	movs	r1, #0
 800960a:	4806      	ldr	r0, [pc, #24]	@ (8009624 <USBD_LL_Init+0x94>)
 800960c:	f7fb ffd6 	bl	80055bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009610:	2280      	movs	r2, #128	@ 0x80
 8009612:	2101      	movs	r1, #1
 8009614:	4803      	ldr	r0, [pc, #12]	@ (8009624 <USBD_LL_Init+0x94>)
 8009616:	f7fb ffd1 	bl	80055bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	2000071c 	.word	0x2000071c

08009628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800963e:	4618      	mov	r0, r3
 8009640:	f7fa fef4 	bl	800442c <HAL_PCD_Start>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 f930 	bl	80098b0 <USBD_Get_USB_Status>
 8009650:	4603      	mov	r3, r0
 8009652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009654:	7bbb      	ldrb	r3, [r7, #14]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	4608      	mov	r0, r1
 8009668:	4611      	mov	r1, r2
 800966a:	461a      	mov	r2, r3
 800966c:	4603      	mov	r3, r0
 800966e:	70fb      	strb	r3, [r7, #3]
 8009670:	460b      	mov	r3, r1
 8009672:	70bb      	strb	r3, [r7, #2]
 8009674:	4613      	mov	r3, r2
 8009676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009686:	78bb      	ldrb	r3, [r7, #2]
 8009688:	883a      	ldrh	r2, [r7, #0]
 800968a:	78f9      	ldrb	r1, [r7, #3]
 800968c:	f7fb fbc8 	bl	8004e20 <HAL_PCD_EP_Open>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f90a 	bl	80098b0 <USBD_Get_USB_Status>
 800969c:	4603      	mov	r3, r0
 800969e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fb fc13 	bl	8004ef4 <HAL_PCD_EP_Close>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 f8eb 	bl	80098b0 <USBD_Get_USB_Status>
 80096da:	4603      	mov	r3, r0
 80096dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096de:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	4618      	mov	r0, r3
 8009708:	f7fb fcb3 	bl	8005072 <HAL_PCD_EP_SetStall>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f8cc 	bl	80098b0 <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971c:	7bbb      	ldrb	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	4611      	mov	r1, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f7fb fcf7 	bl	8005138 <HAL_PCD_EP_ClrStall>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f8ad 	bl	80098b0 <USBD_Get_USB_Status>
 8009756:	4603      	mov	r3, r0
 8009758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975a:	7bbb      	ldrb	r3, [r7, #14]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009776:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800977c:	2b00      	cmp	r3, #0
 800977e:	da0b      	bge.n	8009798 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009786:	68f9      	ldr	r1, [r7, #12]
 8009788:	4613      	mov	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	4413      	add	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	3316      	adds	r3, #22
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	e00b      	b.n	80097b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800979e:	68f9      	ldr	r1, [r7, #12]
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80097ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fb fafc 	bl	8004dd8 <HAL_PCD_SetAddress>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f862 	bl	80098b0 <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	460b      	mov	r3, r1
 8009808:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009818:	7af9      	ldrb	r1, [r7, #11]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	f7fb fbee 	bl	8004ffe <HAL_PCD_EP_Transmit>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f841 	bl	80098b0 <USBD_Get_USB_Status>
 800982e:	4603      	mov	r3, r0
 8009830:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009832:	7dbb      	ldrb	r3, [r7, #22]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	607a      	str	r2, [r7, #4]
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	460b      	mov	r3, r1
 800984a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800985a:	7af9      	ldrb	r1, [r7, #11]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	f7fb fb92 	bl	8004f88 <HAL_PCD_EP_Receive>
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f820 	bl	80098b0 <USBD_Get_USB_Status>
 8009870:	4603      	mov	r3, r0
 8009872:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009874:	7dbb      	ldrb	r3, [r7, #22]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009888:	4b03      	ldr	r3, [pc, #12]	@ (8009898 <USBD_static_malloc+0x18>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	20000c00 	.word	0x20000c00

0800989c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]

}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d817      	bhi.n	80098f4 <USBD_Get_USB_Status+0x44>
 80098c4:	a201      	add	r2, pc, #4	@ (adr r2, 80098cc <USBD_Get_USB_Status+0x1c>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	080098dd 	.word	0x080098dd
 80098d0:	080098e3 	.word	0x080098e3
 80098d4:	080098e9 	.word	0x080098e9
 80098d8:	080098ef 	.word	0x080098ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73fb      	strb	r3, [r7, #15]
    break;
 80098e0:	e00b      	b.n	80098fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098e2:	2303      	movs	r3, #3
 80098e4:	73fb      	strb	r3, [r7, #15]
    break;
 80098e6:	e008      	b.n	80098fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098e8:	2301      	movs	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]
    break;
 80098ec:	e005      	b.n	80098fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098ee:	2303      	movs	r3, #3
 80098f0:	73fb      	strb	r3, [r7, #15]
    break;
 80098f2:	e002      	b.n	80098fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	bf00      	nop
  }
  return usb_status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <calloc>:
 8009908:	4b02      	ldr	r3, [pc, #8]	@ (8009914 <calloc+0xc>)
 800990a:	460a      	mov	r2, r1
 800990c:	4601      	mov	r1, r0
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	f000 b802 	b.w	8009918 <_calloc_r>
 8009914:	2000012c 	.word	0x2000012c

08009918 <_calloc_r>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	fba1 5402 	umull	r5, r4, r1, r2
 800991e:	b93c      	cbnz	r4, 8009930 <_calloc_r+0x18>
 8009920:	4629      	mov	r1, r5
 8009922:	f000 f82f 	bl	8009984 <_malloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	b928      	cbnz	r0, 8009936 <_calloc_r+0x1e>
 800992a:	2600      	movs	r6, #0
 800992c:	4630      	mov	r0, r6
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	220c      	movs	r2, #12
 8009932:	6002      	str	r2, [r0, #0]
 8009934:	e7f9      	b.n	800992a <_calloc_r+0x12>
 8009936:	462a      	mov	r2, r5
 8009938:	4621      	mov	r1, r4
 800993a:	f000 f8af 	bl	8009a9c <memset>
 800993e:	e7f5      	b.n	800992c <_calloc_r+0x14>

08009940 <sbrk_aligned>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4e0f      	ldr	r6, [pc, #60]	@ (8009980 <sbrk_aligned+0x40>)
 8009944:	460c      	mov	r4, r1
 8009946:	6831      	ldr	r1, [r6, #0]
 8009948:	4605      	mov	r5, r0
 800994a:	b911      	cbnz	r1, 8009952 <sbrk_aligned+0x12>
 800994c:	f000 f8ae 	bl	8009aac <_sbrk_r>
 8009950:	6030      	str	r0, [r6, #0]
 8009952:	4621      	mov	r1, r4
 8009954:	4628      	mov	r0, r5
 8009956:	f000 f8a9 	bl	8009aac <_sbrk_r>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d103      	bne.n	8009966 <sbrk_aligned+0x26>
 800995e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009962:	4620      	mov	r0, r4
 8009964:	bd70      	pop	{r4, r5, r6, pc}
 8009966:	1cc4      	adds	r4, r0, #3
 8009968:	f024 0403 	bic.w	r4, r4, #3
 800996c:	42a0      	cmp	r0, r4
 800996e:	d0f8      	beq.n	8009962 <sbrk_aligned+0x22>
 8009970:	1a21      	subs	r1, r4, r0
 8009972:	4628      	mov	r0, r5
 8009974:	f000 f89a 	bl	8009aac <_sbrk_r>
 8009978:	3001      	adds	r0, #1
 800997a:	d1f2      	bne.n	8009962 <sbrk_aligned+0x22>
 800997c:	e7ef      	b.n	800995e <sbrk_aligned+0x1e>
 800997e:	bf00      	nop
 8009980:	20000c14 	.word	0x20000c14

08009984 <_malloc_r>:
 8009984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009988:	1ccd      	adds	r5, r1, #3
 800998a:	f025 0503 	bic.w	r5, r5, #3
 800998e:	3508      	adds	r5, #8
 8009990:	2d0c      	cmp	r5, #12
 8009992:	bf38      	it	cc
 8009994:	250c      	movcc	r5, #12
 8009996:	2d00      	cmp	r5, #0
 8009998:	4606      	mov	r6, r0
 800999a:	db01      	blt.n	80099a0 <_malloc_r+0x1c>
 800999c:	42a9      	cmp	r1, r5
 800999e:	d904      	bls.n	80099aa <_malloc_r+0x26>
 80099a0:	230c      	movs	r3, #12
 80099a2:	6033      	str	r3, [r6, #0]
 80099a4:	2000      	movs	r0, #0
 80099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a80 <_malloc_r+0xfc>
 80099ae:	f000 f869 	bl	8009a84 <__malloc_lock>
 80099b2:	f8d8 3000 	ldr.w	r3, [r8]
 80099b6:	461c      	mov	r4, r3
 80099b8:	bb44      	cbnz	r4, 8009a0c <_malloc_r+0x88>
 80099ba:	4629      	mov	r1, r5
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff ffbf 	bl	8009940 <sbrk_aligned>
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	4604      	mov	r4, r0
 80099c6:	d158      	bne.n	8009a7a <_malloc_r+0xf6>
 80099c8:	f8d8 4000 	ldr.w	r4, [r8]
 80099cc:	4627      	mov	r7, r4
 80099ce:	2f00      	cmp	r7, #0
 80099d0:	d143      	bne.n	8009a5a <_malloc_r+0xd6>
 80099d2:	2c00      	cmp	r4, #0
 80099d4:	d04b      	beq.n	8009a6e <_malloc_r+0xea>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	4639      	mov	r1, r7
 80099da:	4630      	mov	r0, r6
 80099dc:	eb04 0903 	add.w	r9, r4, r3
 80099e0:	f000 f864 	bl	8009aac <_sbrk_r>
 80099e4:	4581      	cmp	r9, r0
 80099e6:	d142      	bne.n	8009a6e <_malloc_r+0xea>
 80099e8:	6821      	ldr	r1, [r4, #0]
 80099ea:	1a6d      	subs	r5, r5, r1
 80099ec:	4629      	mov	r1, r5
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7ff ffa6 	bl	8009940 <sbrk_aligned>
 80099f4:	3001      	adds	r0, #1
 80099f6:	d03a      	beq.n	8009a6e <_malloc_r+0xea>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	442b      	add	r3, r5
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	bb62      	cbnz	r2, 8009a60 <_malloc_r+0xdc>
 8009a06:	f8c8 7000 	str.w	r7, [r8]
 8009a0a:	e00f      	b.n	8009a2c <_malloc_r+0xa8>
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	1b52      	subs	r2, r2, r5
 8009a10:	d420      	bmi.n	8009a54 <_malloc_r+0xd0>
 8009a12:	2a0b      	cmp	r2, #11
 8009a14:	d917      	bls.n	8009a46 <_malloc_r+0xc2>
 8009a16:	1961      	adds	r1, r4, r5
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	6025      	str	r5, [r4, #0]
 8009a1c:	bf18      	it	ne
 8009a1e:	6059      	strne	r1, [r3, #4]
 8009a20:	6863      	ldr	r3, [r4, #4]
 8009a22:	bf08      	it	eq
 8009a24:	f8c8 1000 	streq.w	r1, [r8]
 8009a28:	5162      	str	r2, [r4, r5]
 8009a2a:	604b      	str	r3, [r1, #4]
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f000 f82f 	bl	8009a90 <__malloc_unlock>
 8009a32:	f104 000b 	add.w	r0, r4, #11
 8009a36:	1d23      	adds	r3, r4, #4
 8009a38:	f020 0007 	bic.w	r0, r0, #7
 8009a3c:	1ac2      	subs	r2, r0, r3
 8009a3e:	bf1c      	itt	ne
 8009a40:	1a1b      	subne	r3, r3, r0
 8009a42:	50a3      	strne	r3, [r4, r2]
 8009a44:	e7af      	b.n	80099a6 <_malloc_r+0x22>
 8009a46:	6862      	ldr	r2, [r4, #4]
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	bf0c      	ite	eq
 8009a4c:	f8c8 2000 	streq.w	r2, [r8]
 8009a50:	605a      	strne	r2, [r3, #4]
 8009a52:	e7eb      	b.n	8009a2c <_malloc_r+0xa8>
 8009a54:	4623      	mov	r3, r4
 8009a56:	6864      	ldr	r4, [r4, #4]
 8009a58:	e7ae      	b.n	80099b8 <_malloc_r+0x34>
 8009a5a:	463c      	mov	r4, r7
 8009a5c:	687f      	ldr	r7, [r7, #4]
 8009a5e:	e7b6      	b.n	80099ce <_malloc_r+0x4a>
 8009a60:	461a      	mov	r2, r3
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d1fb      	bne.n	8009a60 <_malloc_r+0xdc>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6053      	str	r3, [r2, #4]
 8009a6c:	e7de      	b.n	8009a2c <_malloc_r+0xa8>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 f80c 	bl	8009a90 <__malloc_unlock>
 8009a78:	e794      	b.n	80099a4 <_malloc_r+0x20>
 8009a7a:	6005      	str	r5, [r0, #0]
 8009a7c:	e7d6      	b.n	8009a2c <_malloc_r+0xa8>
 8009a7e:	bf00      	nop
 8009a80:	20000c18 	.word	0x20000c18

08009a84 <__malloc_lock>:
 8009a84:	4801      	ldr	r0, [pc, #4]	@ (8009a8c <__malloc_lock+0x8>)
 8009a86:	f000 b84b 	b.w	8009b20 <__retarget_lock_acquire_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20000d58 	.word	0x20000d58

08009a90 <__malloc_unlock>:
 8009a90:	4801      	ldr	r0, [pc, #4]	@ (8009a98 <__malloc_unlock+0x8>)
 8009a92:	f000 b846 	b.w	8009b22 <__retarget_lock_release_recursive>
 8009a96:	bf00      	nop
 8009a98:	20000d58 	.word	0x20000d58

08009a9c <memset>:
 8009a9c:	4402      	add	r2, r0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d100      	bne.n	8009aa6 <memset+0xa>
 8009aa4:	4770      	bx	lr
 8009aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aaa:	e7f9      	b.n	8009aa0 <memset+0x4>

08009aac <_sbrk_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	@ (8009ac8 <_sbrk_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f7 fab4 	bl	8001024 <_sbrk>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_sbrk_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_sbrk_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20000d54 	.word	0x20000d54

08009acc <__errno>:
 8009acc:	4b01      	ldr	r3, [pc, #4]	@ (8009ad4 <__errno+0x8>)
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	2000012c 	.word	0x2000012c

08009ad8 <__libc_init_array>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	4d0d      	ldr	r5, [pc, #52]	@ (8009b10 <__libc_init_array+0x38>)
 8009adc:	4c0d      	ldr	r4, [pc, #52]	@ (8009b14 <__libc_init_array+0x3c>)
 8009ade:	1b64      	subs	r4, r4, r5
 8009ae0:	10a4      	asrs	r4, r4, #2
 8009ae2:	2600      	movs	r6, #0
 8009ae4:	42a6      	cmp	r6, r4
 8009ae6:	d109      	bne.n	8009afc <__libc_init_array+0x24>
 8009ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8009b18 <__libc_init_array+0x40>)
 8009aea:	4c0c      	ldr	r4, [pc, #48]	@ (8009b1c <__libc_init_array+0x44>)
 8009aec:	f000 f81a 	bl	8009b24 <_init>
 8009af0:	1b64      	subs	r4, r4, r5
 8009af2:	10a4      	asrs	r4, r4, #2
 8009af4:	2600      	movs	r6, #0
 8009af6:	42a6      	cmp	r6, r4
 8009af8:	d105      	bne.n	8009b06 <__libc_init_array+0x2e>
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b00:	4798      	blx	r3
 8009b02:	3601      	adds	r6, #1
 8009b04:	e7ee      	b.n	8009ae4 <__libc_init_array+0xc>
 8009b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0a:	4798      	blx	r3
 8009b0c:	3601      	adds	r6, #1
 8009b0e:	e7f2      	b.n	8009af6 <__libc_init_array+0x1e>
 8009b10:	08009b90 	.word	0x08009b90
 8009b14:	08009b90 	.word	0x08009b90
 8009b18:	08009b90 	.word	0x08009b90
 8009b1c:	08009b94 	.word	0x08009b94

08009b20 <__retarget_lock_acquire_recursive>:
 8009b20:	4770      	bx	lr

08009b22 <__retarget_lock_release_recursive>:
 8009b22:	4770      	bx	lr

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
